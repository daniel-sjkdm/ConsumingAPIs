{
    "iw3hs1": {
        "author": "Im__Joseph",
        "subreddit": "Python",
        "created": "20/09/2020 00:00:12",
        "distinguished": "moderator",
        "fullname": "t3_iw3hs1",
        "downs": 0,
        "num_comments": 77,
        "title": "Sunday megathread: What's everyone working on this week?",
        "view_count": null,
        "score": 13,
        "url": "https://www.reddit.com/r/Python/comments/iw3hs1/sunday_megathread_whats_everyone_working_on_this/",
        "comments": [
            "I\u2019m really not into any project, but I have been solving a lot of problems on Hacker Rank! If you guys don\u2019t know this, go check it out, it has a lot of problems to solve and are really fun. You can solve them in any language you want, and you have comments for each problem, so you can see what was people\u2019s solutions or thoughts about them!",
            "Creating a stock trading interface and API , will be posting here soon \ud83d\ude0a",
            "Building a Flask web app to track my job applications\n\nWhat I have done:\n\n* Login/registration/authentication\n* Integration with a PostgreSQL database hosted on ElephantSQL. SQL Alchemy models of the tables are all built and working well enough\n* Some basic HTML templates\n\nNext steps:\n\n* Finish off the routes, HTML templates, and forms for a page to edit/delete applications\n* Allow filtering applications by role title, location, date added, etc\n* Build out an automated analysis page. Analysis would include tracking number of apps over time, maybe some NLP or string matching to identify most common skills in a user's listings. That might require some schema changing and DB migration\n* Make it prettier and make it production-level in terms of testing, custom error pages, password recovery with email, file structure, documentation, etc\n* Deploy it\n* If I can figure it out , I think I can use a cloud file storage system, to allow users to upload PDFs of resumes and cover letters so they can be specific to each job. Then potentially some more NLP/analysis based off of the text of these + the descriptions/main skills for their corresponding listings\n\nIt's my most ambitious solo project yet and I am very happy with it thus far",
            "CV generator in React/Django. I'm thinking about booting a charity up and releasing the app for free. I think that everyone should have access to professionally looking CV at no cost. Having no funds shouldn't make you look pale compared to other candidates.",
            "Making a text based adventure game. The programming is easy. Coming up with text is not :p",
            "I want to try coding a simple Deepfake demo to show some students to teach them about Internet safety.  Many of them are upset about the TikTok ban so I want to show them what making video and audio data openly available can mean for public figures.",
            "Building a web app to interact with my Raspberry pi controlling my chicken coop door. I don\u2019t want change the original program running the door too much so I made a button to update a .txt file that tells the Rpi to to open or shut the door.",
            "Im sadly leaving python im getting a job with c#",
            "Building a script to scrape mac addresses from VLans to display on a live dashboard.",
            "Well Im a beginner and I have learnt how to convert text to mp3 in Python using the GTTS module. I manually copy the text of articles into a .txt file where the python code extracts and converts to an mp3. What I want to do is have a script that scrapes the text of any article I save into a bookmarked folder in Firefox and automate the process so all my saved articles are converted to mp3 files when the script is run. I know I could use something like Pocket to read out articles however I want to learn and I prefer doing things myself to do so. :-)\n\n&#x200B;\n\nSo that is my Python goal for the week. Any help or guidance would be appreciated.",
            "Been trying out opencv for the first time playing with edge detection and different cascades",
            "in a church management software, trying to get working with old database but it's not working well",
            "Updating a pygame game named W.O.T.S. .  \nalso, here is a little img converter i made a week ago : [ImageConverter](https://github.com/QuantumCoder002/ImageConverter)",
            "Got myself a starter guide and plan to install python and make a start. Hope this changes my life forever?",
            "I'm working on a python package for creating static geographic map images with markers, polylines, areas, etc. => [https://github.com/flopp/py-staticmaps](https://github.com/flopp/py-staticmaps)",
            "We're enrolling a huge amount of iPads into Intune (a mobile device enrollment service). I'm working on automating as many steps as I can. \n\nSo far I've been able to use the iCloud API to remove activation locks, use Apple Configurator's CLI tools to get the devices serial numbers, use those to assign them to an enrollment profile with the Graph API, then wipe and prepare the device, so basically have all the steps needed.\n\nNow I'm just having a hard time with making it more structured and packaging/organizing so others can use it too.",
            "I listened to a radio lab podcast about \"[gamma frequency](https://www.wnycstudios.org/podcasts/radiolab/articles/bringing-gamma-back)\". Decided to learn a bit about audio via python -- wrote some code to generate a sine wave with a blocking & non-blocking implementation - Defaults to gamma frequency of 40hz. Repo [here](https://github.com/brinnpaul/gamma)",
            "Just finished an Audio App that allows you to make playlists and listen to unlimited songs without ads.",
            "I know I'm three days left but whatever. I'm making a Virtual Assistant that uses voice recognition and has commands like open youtube/browser/notepad/calculator/file explorer and stuff",
            "Django! Building a website to document some of my photography projects. Current focus is on how I might arrange code into apps (or not). Early days but looking good; Each major component gets an app. They are integrated into  other layouts via templatetags.",
            "This is slightly off topic, I'm wanting to learn python for web development, and curious to know where is a good tutorial series to learn python?",
            "Currently working on displaying charts for all running docker containers on my container managment project(FastAPI and Vue): https://github.com/SelfhostedPro/Yacht\n\nThen I'm off to an in browser code editor for docker-compose files.",
            "I just released version 1.7 of my feed [reader](https://github.com/lemon24/reader), which adds support for tagging feeds.\n\nThis week I'll work on promoting it better, and on removing some deprecated code for the next version.",
            "I'm really excited for my new pygame roguelike platformer I've started few days ago!\nTry it here\nhttps://lorenzomari.netlify.app/BulkStuff/PlatFormEr.zip\n(direct download)\nI'd love your comments and ideas. By tomorrow I should be able to upload the new version with new enemies and more stuff",
            "Working in an api wrapper for what up gold. Unfortunately it\u2019s work related so I\u2019m not allowed to share it.\n\nWhat I can share is this, elementary arithmetic examples generator https://github.com/N0rimaki/dothemath\nThey are for my son, but I\u2019m to lazy to search for such examples online.",
            "A silly little tool to scratch a really, _really_ niche itch around getting various color space info from specific screen pixels: https://github.com/chriskiehl/color-distance-tool\n\nAlong the way, I found [this project called pynput](https://pypi.org/project/pynput/), which lets you hook into low level keyboard and mouse events. I spent a stupid amount of time trying to roll it by hand using ctypes + win32apis before realizing that project existed.",
            "I've been working on a discord bot to record and calculate elo from pickup games in a small unreal tournament community: [https://github.com/tchoedak/rankone](https://github.com/tchoedak/rankone). Just went live a week ago, but found that the Elo does not work that well for team based games. Some players will have more pickup game experience, while others less and have varying elo. Elo by default assumes 1v1 so it requires combining all the elo from one team and calculating adjustments. I just updated it to use \\`trueskill\\` instead which is what the xbox live system uses for matchmaking, and should reward elo ratings more fairly and accurately in team games like unreal tournament.\n\n&#x200B;\n\nWhile i'm here going to plug in another project I worked on [https://github.com/tchoedak/PyKeyVal](https://github.com/tchoedak/PyKeyVal). It's a key-value store interface from various backends (Snowflake, SQLite, redis, file) and draws a lot from \\`KeyV\\` (a JS project). The issue with my approach is that it requires installing so many packages for all the various supported backends. I'm not sure how to allow a user to pick and choose which backend + dependencies to install.",
            "[\ud83d\udd0a onhold: Play music while and after shell jobs complete](https://github.com/alexdelorenzo/onhold)\n--",
            "Thinking of a project that works with Youtube and Spotify API, both those API's have wrappers already built for it, should I make requests to their endpoints on my own? (Using the requests module) or should I use those wrappers?\n\nFor example youtube has the \"google-api-python-client\" and spotify has \"spotipy\".",
            "Learning the dang language picked up the \"python crash course\" and \"automate the boring stuff with python\" and plan to give read through at least the crash course after work today.",
            "Trying to learn it enough to be able to actually use it lol I want to make a game along the lines of a point and click adventure. Writing and music production is my first love so to be able to do it ALL myself would be awesome.",
            "Build an traffic model forecaster for Auckland City, since the main bridge is \"broken\" and traffic is a chaos on a daily basis as a result.",
            "Creating xmlrpc interface to interactive brokers trading api!",
            "Just finished up my first python project, a simple script using selenium to input my timesheet for the week for work. It's messy, and I'm sure it could be refactored and written much better, but it works, and I'm proud of it",
            "A shell-creating programming interface",
            "Creating an interface (?) that converts patient diagnosis data to a format that will allow me to batch group them into their diagnostic groups. It will make my cms fiscal year 2021 way easier to see what changes there are between years.",
            "I am taking a class that requiresme to learn two new languages for stuffI normally do in matlab. I am very good in matlab but python didn't have the interface like matlab, so my prof told me to use anaconda which is python with matlab like interface. 2nd will be Julia",
            "Ok, I must have went to the wrong place and so was mistaken....my bad.",
            "Guys, I've made a library to implement REST without serializers (DRF and stuff)  Basically what it does is just serializes queryset of any complicity, so you can just \n\n    def article_list(request):\n        articles = Article.objects.all().prefetch_related('tags')\n        return Response(articles)\n\nAnd it will produce a json response, except those model fields that a specified globally as private in PRIVY\\_FIELDS like this: \n\n    class Article(RestModel):\n        title = models.CharField(max_length=255)\n        views_count = models.IntegerField()\n        PRIVY_FIELDS = ['views_count']\n\nSo here it is: [https://github.com/maxcoredev/django-rest](https://github.com/maxcoredev/django-rest)",
            "im working on a productivity management app using tkinter and json called TaskMaster"
        ]
    },
    "iymd26": {
        "author": "Im__Joseph",
        "subreddit": "Python",
        "created": "24/09/2020 00:00:16",
        "distinguished": "moderator",
        "fullname": "t3_iymd26",
        "downs": 0,
        "num_comments": 2,
        "title": "Thursday megathread: Python careers!",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/iymd26/thursday_megathread_python_careers/",
        "comments": [
            "I saw a comment about the requirements for landing a job as a web dev with Python and JS. Generally, is it true?\n\n>As far as I have read, you need to know at least:\n>\n>- Your base language (Python, in this case)\n>\n>- A SQL's flavor (usually PostgreSQL or MySQL)\n>\n>- Git\n>\n>- A framework (Django or Flask)\n>\n>Add symmilar requirements to Javascript and you are >set for full-stack development."
        ]
    },
    "iyltgo": {
        "author": "AuthorOfCode",
        "subreddit": "Python",
        "created": "23/09/2020 23:28:44",
        "distinguished": null,
        "fullname": "t3_iyltgo",
        "downs": 0,
        "num_comments": 3,
        "title": "My solutions for Cracking the Coding Interview questions",
        "view_count": null,
        "score": 104,
        "url": "https://www.reddit.com/r/Python/comments/iyltgo/my_solutions_for_cracking_the_coding_interview/",
        "comments": [
            "Are you accepting pull requests? Taking a quick look at some of your solutions, I have some more efficient solutions I'd love to add (not overwrite, but show alternative ways to do it).",
            "Also, adding docstrings explaining the problem would help who stumbles upon your repo without the book.\n\nAsking for a friend :-)",
            "Interesting resources.\n\nI think If you are looking at studying python exercises, it's probably more efficient to do them one at a time and post them to code review forums rather than comparing your solutions to someone else's."
        ]
    },
    "iy9cx3": {
        "author": "Ancalabro",
        "subreddit": "Python",
        "created": "23/09/2020 12:44:16",
        "distinguished": null,
        "fullname": "t3_iy9cx3",
        "downs": 0,
        "num_comments": 48,
        "title": "2-years in the making! Codename Mallow is a 4 player local/online versus multiplayer that I've been coding entirely in Python/Pygame. Tackled rope physics, particle engines, and other fun things. The demo launched today!! The source code is available, too. Enjoy :)",
        "view_count": null,
        "score": 444,
        "url": "https://www.reddit.com/r/Python/comments/iy9cx3/2years_in_the_making_codename_mallow_is_a_4/",
        "comments": [
            "Game looks cool! I appreciate you sharing your source code as well! Its hard to find good resources for pygame so things like this are very helpful",
            "Wow! This is really well made",
            "Fuck Among Us, this is the real dealllllll",
            "Thank you for the learning opportunity \ud83d\ude4f",
            "Looks amazing!!",
            "You're from BC! Keep it up! Creators of Don't Starve are from here as well. Good luck to you. Hopefully, you follow in their footsteps.",
            "I take it this is in part an homage to Marshmallow Duel?",
            "This is fucking amazing.",
            "Canada represent! Way to go! Just when I thought python couldn\u2019t get more awesomer. =]",
            "Awesome job!!",
            "Congratulations on your project and thank you so much for sharing it with us. Much appreciate.",
            "Just wanted to say great work and let you know how impressive it is to see someone start from nothing and get to a released product like this. Congrats!",
            "The demo looks pretty good.. can it be played on mobile?\nIf there is a link to playstore I would love to share it with my friends.",
            "I just started to use pygame recently and it's just me or the documentation of pygame is just a mess?\n\nThe reference documents doesn't have any examples. The community tutorials focus on building a whole game (albeit small game) without touching on the structure of a project.",
            "Wow this is giving me some WarioLand vibes. Will definitely check it out! Nicely done.",
            "Hello, I don't understand where I can find the source code. I would love to find it since your game runs so smoothly. Can you help me ?",
            "Holy fucking shit my guy that's amazing",
            "The center-line-gravity-flip reminded me of Ibb and Obb. Coincidence?",
            "Intermediate? :S\n\nSo this is what PyGame can do!"
        ]
    },
    "iy48av": {
        "author": "Aaris_Kazi",
        "subreddit": "Python",
        "created": "23/09/2020 05:25:49",
        "distinguished": null,
        "fullname": "t3_iy48av",
        "downs": 0,
        "num_comments": 47,
        "title": "I had tried to visualise the sorting of a data structure for the programmers who are new in data structure",
        "view_count": null,
        "score": 936,
        "url": "https://v.redd.it/4zow9alp1uo51",
        "comments": [
            "I'd really recommend getting into the habit of thinking about variable naming, even in small projects like this. I tried to look at your source code and it's all `a`, `p`, etc.\n\nOther than that, good job! Maybe you could somehow flash the two values being compared? I would want it to somehow visualize what it is actually doing (rather than just moving purple bars, actually show what bar is the current selected one and what bar it's currently comparing against)",
            "While it's always good to see people code, the best visualisation of sorting is still here: [https://www.youtube.com/user/AlgoRythmics/videos](https://www.youtube.com/user/AlgoRythmics/videos)",
            "Did you use opencv as a GUI library? Just curious why not matplotlib, kivy, pygame, pyQT, tkinter, etc?",
            "Just a premise: I take this post as a point to start a discussion, I have nothing against the post itself, but more about it's implications, and I didn't downvoted it.\n\nWith all the due respect this post should not have the Scientific computing flare, and should be at least tagged as Newbie or show and tell, but most of all, it should be in r/learningpython\n\nDue to the flare, I came here expecting something different than the other hundreds of sorting visualizations that appear here every other day.\nInstead, entering values to sort by hand, regrettable variable naming...\nAnd yet, more than 600 upvotes, and counting.\n\nThere have been discussions about this in the past, but I think the conclusions that were drawn (let's put an effort to keep this place clean, focused, and tidy) where wrong.\n\nThis sub has been friendly taken over by low level posts (again, no offence), newbie posts, vanity screencasts of how someone codes, etc.\n\nNow, the sub name does not allow for much of a cutoff, and wether we like it or not, this very example is indeed Python, so hard to argue it doesn't belong here.\n\nI think it's time to have something less obvious and ambiguous like \"advanced python\", or something, and leave this to the current audience.\n\nAgain, no intent to start a flame war or to accuse anyone, it's just an attempt to keep things separated so that people that care about things other than basic/trivial stuff can get their fix without having to dodge 19/20 posts (optimistic here) or getting disappointed like in this case.\n\nEdit: phone typos and other stuff",
            "Source-Code: [https://github.com/Aaris-Kazi/Visualizing-Sorting-Algo-in-Python](https://github.com/Aaris-Kazi/Visualizing-Sorting-Algo-in-Python)",
            "Thats cool, if the bars in animation window could also show the number, i mean you must have tried it, i just think it would have been more readable.",
            "maybe change the color of the two bars that are being compared?",
            "[deleted]",
            "This is great! Perhaps you could allow the user to separate values with commas/spaces rather than entering them one line at a time?",
            "I remember creating similar thing in the past using TK interface\nSee if it helps you in anyway\nhttps://github.com/SobyDamn/sorting-visualisation",
            "Doesn't explain much but [THIS](https://youtube.com/watch?v=kPRA0W1kECg) is still one of the finest visualizations I've seen!",
            "very nice bro! One tip, when showing this. Make sure you put in the numbers in random order(as so one bar would also stop in the middle) now it just looks like rotating all the lines from top to bottom. But nice program!",
            "That's a nice representation. Checkout similar video which does same thing for multiple algorithms and on a larger scale\n\n&#x200B;\n\n [https://www.youtube.com/watch?v=kPRA0W1kECg](https://www.youtube.com/watch?v=kPRA0W1kECg)",
            "This looks like a nested for loop with a conditional",
            "Damnnnnn bro \u2764\ufe0f",
            " Where the code at?"
        ]
    },
    "iylxnq": {
        "author": "Daktic",
        "subreddit": "Python",
        "created": "23/09/2020 23:34:54",
        "distinguished": null,
        "fullname": "t3_iylxnq",
        "downs": 0,
        "num_comments": 4,
        "title": "Updating old projects vs creating new ones",
        "view_count": null,
        "score": 20,
        "url": "https://www.reddit.com/r/Python/comments/iylxnq/updating_old_projects_vs_creating_new_ones/",
        "comments": [
            "It depends. One way to think about this. \n\nIs it better to write new code at the same level  as your current code or is it better sometimes to refactor your code and figure out new better ways of doing the same thing. \n\nBoth have their benefits.  Only you know which you would get the greatest benefit from",
            "depends on how fast you can rewrite it"
        ]
    },
    "iyipal": {
        "author": "pmz",
        "subreddit": "Python",
        "created": "23/09/2020 20:44:27",
        "distinguished": null,
        "fullname": "t3_iyipal",
        "downs": 0,
        "num_comments": 2,
        "title": "Improving Python exception chaining with...",
        "view_count": null,
        "score": 16,
        "url": "https://blog.ram.rachum.com/post/621791438475296768/improving-python-exception-chaining-with",
        "comments": [
            "I read a lot of PEP's, I read a lot of source code, and I always try to keep up on best practices and embarrassingly, I had no idea that `raise...from` existed."
        ]
    },
    "iyo4ij": {
        "author": "Tomas_83",
        "subreddit": "Python",
        "created": "24/09/2020 02:05:58",
        "distinguished": null,
        "fullname": "t3_iyo4ij",
        "downs": 0,
        "num_comments": 7,
        "title": "Should i try to learn how the libraries are made?",
        "view_count": null,
        "score": 6,
        "url": "https://www.reddit.com/r/Python/comments/iyo4ij/should_i_try_to_learn_how_the_libraries_are_made/",
        "comments": [
            "Libraries are a double-edged sword. They are immensely helpful and allow you accomplish tasks easily but the also can abstract away a lot of the internal workings of whatever they do. You don't need to understand their implementations exactly but I'd encourage you to make sure you at least learn the concepts behind what they're doing.",
            "I rarely ever look at a libraries code, unless I am getting an error that a simple google search can't solve.  \n\n\nThen occasionally I'll crack open a library to see what I may be doing wrong.",
            "Use the library\u2019s to help you accomplish the tasks necessary to build whatever applications you\u2019re building\u2026 But there\u2019s no need to be completely versed in the library if you\u2019re learning",
            "Use libraries to build more complex applications.  This is how all sciences work: you use developments of those before you to build new, better things."
        ]
    },
    "iydwme": {
        "author": "SelfhostedPro",
        "subreddit": "Python",
        "created": "23/09/2020 16:50:36",
        "distinguished": null,
        "fullname": "t3_iydwme",
        "downs": 0,
        "num_comments": 7,
        "title": "I started learning python in February (with no programming experience) and today I'm releasing the alpha for my first app! (container management webui)",
        "view_count": null,
        "score": 21,
        "url": "https://www.reddit.com/r/Python/comments/iydwme/i_started_learning_python_in_february_with_no/",
        "comments": [
            "This is super impressive!",
            "Curious what your background is? Only a few months and you added many other frameworks and languages in and zero prior experience?",
            "Is this all made with Python? Because if it is, I'm very impressed! I started programming with Python around the same time as you. Would you like to learn together?"
        ]
    },
    "iyripu": {
        "author": "Albertchristopher",
        "subreddit": "Python",
        "created": "24/09/2020 05:50:14",
        "distinguished": null,
        "fullname": "t3_iyripu",
        "downs": 0,
        "num_comments": 0,
        "title": "Choosing Your First Programming Language For Artificial Intelligence: Python and Ruby",
        "view_count": null,
        "score": 1,
        "url": "https://www.artiba.org/blog/choosing-your-first-programming-language-python-and-ruby",
        "comments": []
    },
    "iyr3av": {
        "author": "cheerfulboy",
        "subreddit": "Python",
        "created": "24/09/2020 05:18:08",
        "distinguished": null,
        "fullname": "t3_iyr3av",
        "downs": 0,
        "num_comments": 1,
        "title": "How to use Earth Engine with pydeck for 3D terrain visualization",
        "view_count": null,
        "score": 0,
        "url": "https://blog.gishub.org/earth-engine-tutorial-37-how-to-use-earth-engine-with-pydeck-for-3d-terrain-visualization",
        "comments": [
            "What a suspicious domain you have there. What if someone were to open it?"
        ]
    },
    "iyr0c7": {
        "author": "cheerfulboy",
        "subreddit": "Python",
        "created": "24/09/2020 05:11:54",
        "distinguished": null,
        "fullname": "t3_iyr0c7",
        "downs": 0,
        "num_comments": 0,
        "title": "Building Discord Bots \ud83e\udd16 with Python",
        "view_count": null,
        "score": 1,
        "url": "https://spohnz.com/building-discord-bots-with-python-ckffz8dx2009e7bs15w9c5070",
        "comments": []
    },
    "iyr00u": {
        "author": "geeksforgeeks",
        "subreddit": "Python",
        "created": "24/09/2020 05:11:11",
        "distinguished": null,
        "fullname": "t3_iyr00u",
        "downs": 0,
        "num_comments": 0,
        "title": "Why Python Is Used For Developing Automated Trading Strategy?",
        "view_count": null,
        "score": 0,
        "url": "https://www.reddit.com/r/Python/comments/iyr00u/why_python_is_used_for_developing_automated/",
        "comments": []
    },
    "iyaqye": {
        "author": "Tech-Matt",
        "subreddit": "Python",
        "created": "23/09/2020 14:05:04",
        "distinguished": null,
        "fullname": "t3_iyaqye",
        "downs": 0,
        "num_comments": 0,
        "title": "I built a simple biological model in Python and Jupyter",
        "view_count": null,
        "score": 15,
        "url": "https://www.reddit.com/r/Python/comments/iyaqye/i_built_a_simple_biological_model_in_python_and/",
        "comments": []
    },
    "iyocgi": {
        "author": "MLtinkerer",
        "subreddit": "Python",
        "created": "24/09/2020 02:19:13",
        "distinguished": null,
        "fullname": "t3_iyocgi",
        "downs": 0,
        "num_comments": 0,
        "title": "State of the art in 3D dense face alignment!",
        "view_count": null,
        "score": 1,
        "url": "/r/LatestInML/comments/ixybzg/state_of_the_art_in_3d_dense_face_alignment/",
        "comments": []
    },
    "iynixh": {
        "author": "nouser_nameavailable",
        "subreddit": "Python",
        "created": "24/09/2020 01:31:28",
        "distinguished": null,
        "fullname": "t3_iynixh",
        "downs": 0,
        "num_comments": 1,
        "title": "Learn python from scratches",
        "view_count": null,
        "score": 0,
        "url": "https://www.reddit.com/r/Python/comments/iynixh/learn_python_from_scratches/",
        "comments": [
            "this isn't /r/LearnPython"
        ]
    },
    "iymyrd": {
        "author": "VirusMinus",
        "subreddit": "Python",
        "created": "24/09/2020 01:00:14",
        "distinguished": null,
        "fullname": "t3_iymyrd",
        "downs": 0,
        "num_comments": 2,
        "title": "I learned python fundamentals and I am currently learning the OOP so my question is how to practice OOP and how to know it's enough tutorials and what to do after it should I watch some projects tutorial then start my own project because I dont want to get stuck in tutorials hell",
        "view_count": null,
        "score": 0,
        "url": "https://www.reddit.com/r/Python/comments/iymyrd/i_learned_python_fundamentals_and_i_am_currently/",
        "comments": [
            "https://learnbyexample.github.io/curated-resources/python-intermediate/",
            "Play around with what you know. Try to work on a small project. If you find you're limited by your abilities, focus on what you're missing."
        ]
    },
    "iy21cn": {
        "author": "ralphc",
        "subreddit": "Python",
        "created": "23/09/2020 02:47:47",
        "distinguished": null,
        "fullname": "t3_iy21cn",
        "downs": 0,
        "num_comments": 0,
        "title": "Python in Car Racing - Interview about simulation and test software at RCR",
        "view_count": null,
        "score": 47,
        "url": "https://talkpython.fm/episodes/show/281/python-in-car-racing",
        "comments": []
    },
    "iy4oop": {
        "author": "lindsen13",
        "subreddit": "Python",
        "created": "23/09/2020 06:03:59",
        "distinguished": null,
        "fullname": "t3_iy4oop",
        "downs": 0,
        "num_comments": 5,
        "title": "Use Google's Personal data about you - a simple project with Python",
        "view_count": null,
        "score": 17,
        "url": "https://www.reddit.com/r/Python/comments/iy4oop/use_googles_personal_data_about_you_a_simple/",
        "comments": [
            "The link will direct you to my personal blog, where I demonstrate how to do this with some simple Python code. I use the *Json* library, the *Pandas* library and *datetime*.",
            "Do you know pandas.read_json?",
            "mooi"
        ]
    },
    "ixl4bg": {
        "author": "ai_basics",
        "subreddit": "Python",
        "created": "22/09/2020 10:54:36",
        "distinguished": null,
        "fullname": "t3_ixl4bg",
        "downs": 0,
        "num_comments": 15,
        "title": "Gradient descent from scratch",
        "view_count": null,
        "score": 532,
        "url": "https://youtu.be/vGaQgNRHxbs",
        "comments": [
            "very easy to follow and simple, thank you!",
            "Oh hell, where was this last Sunday when I was floundering on a class project on this very assignment.\n\nAnyway, good work.",
            "Thanks bro!",
            "This is great! Thanks",
            "*me trying to understand what the second for loop is doing and what exactly gradient descent is trying to accomplish/what\u2019s its use*\ud83e\udd74\ud83d\udc41\ud83d\udc44\ud83d\udc41",
            "Thank you so much for this. It is really very useful/helpful.",
            "that intro deserves an upvote.",
            "Just what i was looking for, big thanks!"
        ]
    },
    "iycdol": {
        "author": "PowerOfLove1985",
        "subreddit": "Python",
        "created": "23/09/2020 15:33:09",
        "distinguished": null,
        "fullname": "t3_iycdol",
        "downs": 0,
        "num_comments": 0,
        "title": "Analyzing FBI crime statistics using Python (Pandas + Folium), part 1",
        "view_count": null,
        "score": 2,
        "url": "https://habr.com/en/post/519154/",
        "comments": []
    },
    "iycb6t": {
        "author": "FullRaise",
        "subreddit": "Python",
        "created": "23/09/2020 15:29:24",
        "distinguished": null,
        "fullname": "t3_iycb6t",
        "downs": 0,
        "num_comments": 0,
        "title": "Simple Desmos/Symbolab to Python converter",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/iycb6t/simple_desmossymbolab_to_python_converter/",
        "comments": []
    },
    "iy9q0i": {
        "author": "MikeDoesDo",
        "subreddit": "Python",
        "created": "23/09/2020 13:06:25",
        "distinguished": null,
        "fullname": "t3_iy9q0i",
        "downs": 0,
        "num_comments": 3,
        "title": "More beautiful data visualisation than seaborn / matplotlib",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/iy9q0i/more_beautiful_data_visualisation_than_seaborn/",
        "comments": [
            "Resolution of vector graphics is infinite because they\u2019re mathematically defined curves. If you\u2019re exporting at a lower resolution than you want then that\u2019s on you...\n\nDo you have any particular operating requirements? There are some other graph libraries like plotly, but not sure if web-based is applicable for your use-case. General advice would be that pretty much anything you want to make _can_ be made in matplotlib, it just might require significant modification if you need something particularly niche. Then again, you haven\u2019t specified what you\u2019re plotting or how you want it displayed, so hard to help specify something appropriate for you.",
            "I like the way plotly figures look.  I believe you have a lot of flexibility for stylings -- the plotly website has an example section you can browse through.\n\nIf you just need pictures for a report, plotly can be used in jupiter notebooks.  The figures will be plotted right on the notebook.",
            "Matplolib defaults give you something basic to start with and it's up to the user to style it to their standards of beauty. There are other tools like Bokeh and Chartify (based on Bokeh) that are web based, provide interactivity and try to improve on the UI aspect of charting."
        ]
    },
    "iyffzr": {
        "author": "musicalfoxes",
        "subreddit": "Python",
        "created": "23/09/2020 18:06:02",
        "distinguished": null,
        "fullname": "t3_iyffzr",
        "downs": 0,
        "num_comments": 2,
        "title": "Just wanted to share my personal practice for learning the language",
        "view_count": null,
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/iyffzr/just_wanted_to_share_my_personal_practice_for/",
        "comments": [
            "This is what i am doing Miguel's mega flask course, great to come across someone who practices similarly."
        ]
    },
    "iyf896": {
        "author": "SevenCell",
        "subreddit": "Python",
        "created": "23/09/2020 17:55:26",
        "distinguished": null,
        "fullname": "t3_iyf896",
        "downs": 0,
        "num_comments": 2,
        "title": "\"x is 12\" - debug function giving name and value of variable",
        "view_count": null,
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/iyf896/x_is_12_debug_function_giving_name_and_value_of/",
        "comments": [
            "https://github.com/gruns/icecream\n\nhttps://github.com/alexmojaki/snoop"
        ]
    },
    "iyas07": {
        "author": "figTreeProductions",
        "subreddit": "Python",
        "created": "23/09/2020 14:06:37",
        "distinguished": null,
        "fullname": "t3_iyas07",
        "downs": 0,
        "num_comments": 0,
        "title": "Minesweeper, in a Single Text Widget",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/iyas07/minesweeper_in_a_single_text_widget/",
        "comments": []
    },
    "iydzps": {
        "author": "0xh4ck3r",
        "subreddit": "Python",
        "created": "23/09/2020 16:54:53",
        "distinguished": null,
        "fullname": "t3_iydzps",
        "downs": 0,
        "num_comments": 0,
        "title": "Python Tutor - Visualize Python code execution",
        "view_count": null,
        "score": 1,
        "url": "http://www.pythontutor.com/",
        "comments": []
    },
    "iy7l7u": {
        "author": "sheddyNathan",
        "subreddit": "Python",
        "created": "23/09/2020 10:28:13",
        "distinguished": null,
        "fullname": "t3_iy7l7u",
        "downs": 0,
        "num_comments": 0,
        "title": "Deploy Your Python Application using Cloud Foundry",
        "view_count": null,
        "score": 3,
        "url": "https://www.reddit.com/r/Python/comments/iy7l7u/deploy_your_python_application_using_cloud_foundry/",
        "comments": []
    },
    "iy91w2": {
        "author": "UberSeal",
        "subreddit": "Python",
        "created": "23/09/2020 12:23:54",
        "distinguished": null,
        "fullname": "t3_iy91w2",
        "downs": 0,
        "num_comments": 16,
        "title": "u/Aaris_Kasi 's post on sorting visualizations had reminded me of a bubble sort visualization which I had wrote for the same reason as his. I don't have any images or videos but here's the code. Any criticism is appreciated! It uses Pygame!",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/iy91w2/uaaris_kasi_s_post_on_sorting_visualizations_had/",
        "comments": [
            "Dude I wish I had used, pygame but the thing is I can't run. So I don't know the functioning. But if u send me the o/p it would be appreciated. And talent never get criticised",
            "Still it was a pleasure meeting you",
            "I apologize for spelling u/Aaris_Kazi 's username incorrectly."
        ]
    },
    "iy1irs": {
        "author": "spidunno",
        "subreddit": "Python",
        "created": "23/09/2020 02:14:46",
        "distinguished": null,
        "fullname": "t3_iy1irs",
        "downs": 0,
        "num_comments": 2,
        "title": "Python Shell demonstration",
        "view_count": null,
        "score": 13,
        "url": "https://www.reddit.com/r/Python/comments/iy1irs/python_shell_demonstration/",
        "comments": [
            "If you're already doing the command line splitting in your shell, you shouldn't be passing the call with `subprocess.run(shell=True)`, that will call another shell that you probably don't need/want instead of calling the OS process creation API directly.\n\nAlso, if this is for learning what you have is fine, but you might be interested in the [`shlex` module](https://docs.python.org/3/library/shlex.html) from the standard library that handles the more sophisticated cases of command splitting like regular shell."
        ]
    },
    "iy7wy7": {
        "author": "ai_basics",
        "subreddit": "Python",
        "created": "23/09/2020 10:56:30",
        "distinguished": null,
        "fullname": "t3_iy7wy7",
        "downs": 0,
        "num_comments": 0,
        "title": "Stochastic gradient descent theory part",
        "view_count": null,
        "score": 2,
        "url": "https://youtu.be/nxGZzDQIb4k",
        "comments": []
    },
    "iy9wkh": {
        "author": "Reginald_Martin",
        "subreddit": "Python",
        "created": "23/09/2020 13:17:19",
        "distinguished": null,
        "fullname": "t3_iy9wkh",
        "downs": 0,
        "num_comments": 0,
        "title": "Complete Python Programming Tutorial | Features and Applications of Python | Python Basics & Examples",
        "view_count": null,
        "score": 0,
        "url": "https://www.reddit.com/r/Python/comments/iy9wkh/complete_python_programming_tutorial_features_and/",
        "comments": []
    },
    "ixh6zl": {
        "author": "BoomerFelonOwl",
        "subreddit": "Python",
        "created": "22/09/2020 05:10:16",
        "distinguished": null,
        "fullname": "t3_ixh6zl",
        "downs": 0,
        "num_comments": 73,
        "title": "I finally published my first pip package. Enter a reddit user and get organized data out. It also can download all of their pictures",
        "view_count": null,
        "score": 239,
        "url": "https://www.reddit.com/r/Python/comments/ixh6zl/i_finally_published_my_first_pip_package_enter_a/",
        "comments": [
            "That's some creepy stalker shit ngl.",
            "Your project does not have a requirements, setup, OR pyproject file.  How do you even handle your dependencies?",
            "Difficult to package? What guide did you use?",
            "For my thirsty boys and girls\n\n```\n$cat images.txt | xargs wget\n```\n\ndownloads all the images in the file images.txt",
            "Bruh can I create a tutorial endorsing your package?",
            "christ, i can't imagine what a huge pain in the ass it would be to handle all the different ways people post pictures to reddit! imgur, the reddit gallery, off-site direct links, those fucking gif sites (are those \"pictures\"?) etc etc...",
            "To everyone concerned about privacy and moral stuff. It's by making this tools that you bring awareness to the common people about what they put online. So thank you op",
            "I did something similar in C, but it tries to guess where are you from. github.com/GrbavaCigla/redditholmes",
            "Given that procedural scams have become a new and unregulated norm, and digital identity rights continue to erode at a fast pace, did you consider the moral implications of making pseudo anonymous user data even easier to obtain and manipulate?\n\nA huge part of being a coder is understanding the impacts of your tech.",
            "What was your inspiration to do this project?",
            "Neat project!\n\nQuestion: how do you download images from a reddit link? I had trouble with that for several days now.",
            "How did you do this? Haha as someone who have just started out on Python (currently doing some courses on Coursera), I can't imagine how you did this",
            "I need this but for discord\n\nEdit: Alright, clearly this was an unpopular statement. I just meant I want to download all the images from a DM conversation to hold onto the memories."
        ]
    },
    "iy58e7": {
        "author": "brenns10",
        "subreddit": "Python",
        "created": "23/09/2020 06:52:44",
        "distinguished": null,
        "fullname": "t3_iy58e7",
        "downs": 0,
        "num_comments": 0,
        "title": "Visualizing gzip compression with Python",
        "view_count": null,
        "score": 2,
        "url": "https://brennan.io/2020/09/22/compression-curves/",
        "comments": []
    },
    "ixnxg1": {
        "author": "big_boy_dollars",
        "subreddit": "Python",
        "created": "22/09/2020 13:59:54",
        "distinguished": null,
        "fullname": "t3_ixnxg1",
        "downs": 0,
        "num_comments": 67,
        "title": "Should I write a python module in C++?",
        "view_count": null,
        "score": 48,
        "url": "https://www.reddit.com/r/Python/comments/ixnxg1/should_i_write_a_python_module_in_c/",
        "comments": [
            "If you're comfortable with C++ and your speed bottleneck is in a nicely self-contained chunk of logic, then writing a module in C++ is a great solution. Check out the documentation on [extending python](https://docs.python.org/3/extending/extending.html). This is absolutely the approach I would default to if I wanted to fix a bottlneck in some data processing code.\n\nCython is also a reasonable solution here. If you're not comfortable with C++, learning Cython is probably a little easier, and you'll have the advantage that your whole code base is in a single language.\n\nPersonally, I think C++ is the cleanest solution here. You keep your python code as is, and just encapsulate the computationally intensive parts.\n\nEDIT: Ohh, and I'm assuming here you're already taking advantage of `numpy` to the extent possible. If not, that's probably the real solution here.",
            "Haven't used it myself but Numba is supposed to be fairly good at speeding up (some) Python by compiling it to machine code at runtime. May be worth checking out what it can do for you as it would presumably be a quicker fix than writing a C++ binding.",
            "First thing first I suggest using a profiler to figure out the bottleneck. I recommend https://github.com/benfred/py-spy as it's really straight-forward to use and provides a very quick way to identify problems. There are plenty more good profilers out there. Depending on what you find using the profiler, there might be a number of solutions available to you for optimization. \n\nE.g. caching can often provide significant more benefit than switching languages, and can be much quicker to implement. (At the cost of memory usage). This is situation I've seen many times. \n\nOne example comes to mind, you might have a number of files that you keep reading, parsing and converting to something useful to you. For this case I would say:\n\n - Make sure you only open the files once, and keep the result in memory. Reading files is very costly. \n - Make sure you only parse and convert the date once. Maybe even store the parsed data on disk in other files (see `pickle` library) so you can re-run you scripts faster the next time\n - If there are multiple files about, look into parallelizing your work with `multiprocessing` (https://docs.python.org/3.7/library/multiprocessing.html) or `threading` (https://docs.python.org/3.7/library/threading.html) \n\n---\n\nIt can be that you already have this optimized to the max, and my previous suggestions are not relevant. In this situation I would say look at open source libraries, that may already have solved your bottleneck (possible in a more low-level language). There are plenty of very good scientific libraries for python out there (numpy and scipy to name a few)\n\n---\n\nIf all that fails, I suggest extending python with C or C++. The official docs are really good (https://docs.python.org/3.7/extending/extending.html), but learning C or C++ is no small task.",
            "As some people said here, the first thing you should ever do is profiling for speed (memory would be great also). Once you do that and you are **almost sure** that you did everything you could, then I'd go take a look to the following tools:\n\n[Jax](https://github.com/google/jax)\n\n[awkward-array](https://github.com/scikit-hep/awkward-array) (besides performant, they are **really** great for prototyping)\n\n[Numba](http://numba.pydata.org/)\n\n[Pycuda](https://github.com/inducer/pycuda) and [cupy](https://github.com/cupy/cupy) (both on cuda only)\n\n[Loopy](https://github.com/inducer/loopy) (cpu, cuda, opencl)\n\n[Pytorch's Torchscript](https://pytorch.org/docs/stable/jit.html) (cpu, gpu and tpu)\n\n[Rapids stack](https://github.com/rapidsai) (managing data on cuda)\n\n&#x200B;\n\nI've never used loopy, but it seems interesting. I know that torchscript has somewhat nice performance on the GPU, but I've never used on CPU. You can connect Numba, Pytorch, cupy and pycuda by passing data pointers without copying data, if you ever need to work with them. This might be interesting because you can write:\n\n1. Plain native cuda kernels on cupy (without all the tooling effort).\n2. Numba cuda compiled kernels from plain python functions (I'm serious, it's really easy).\n\nI dont know if we can easily combine these two (and pytorch) with jax, but it would be really great. Also Rapids has some nice things like dataframes on cuda. I know that jax and numba can ridiculously speed up your code. It's amazing how usually easy it is to use this two to make the code fast.\n\nIf you have cuda consider on using rapids dataframes to preprocess things. And to perform your tasks, jax and numba are the default way to go. You should check the others out for sure, but make those two your priority.",
            "Have you tried python's multiprocessing library?\n\n It could help with for your case.",
            "This article is good for quick introduction to boiler plate c++ integration to pandas.\n\n[https://blog.esciencecenter.nl/irregular-data-in-pandas-using-c-88ce311cb9ef](https://blog.esciencecenter.nl/irregular-data-in-pandas-using-c-88ce311cb9ef)",
            "The first thing I would do is to just try and run the scripts with the pypy-interpreter, most likely that would be enough to make a huge difference. \n\nSecond step would be to analyze the runtime with a profiler to find the slow parts. A lot of the time it's just a single function that can be refactored or some work done that an optimized library can take care of. \n\nOf course, if you feel like you want to write something in c/c++ than you should most definitely do that, it's a good learning experience.",
            "I'd use a profiler to find the slow pieces and look at cython for a performance boost. This will allow you to start by moving your slow code to its own module and add annotations to it make it compile to efficient code. Numpy is fully supported.\n\nThe major advantage to this approach is that it does not require you to write cython to c or c++ interface code as that's auto generated. The project has been around for years.",
            "I\u2019m not sure C++ will perform much better than Python if your bottleneck is file I/O, simply because files are slow in all programming schemes. You could try an asynchronous IO library, but I\u2019m not sure what\u2019s available right now because I\u2019ve never had I/O needs that were intense enough to warrant it being asynchronous.",
            "You probably did it already, but by googling \u2018python read gb of text\u2019 I see many nice advices on how to optimize Python code. If those are not enough, then you could try to write some lines in C++. If those are significantly faster, go for it.",
            "For work involving arrays with more than one dimension, Cython is not very helpful or performant. It's not as relevant to numerical computing work as it is to speeding up vanilla Python logic.\n\nWriting inner loops in Numba can help a lot over numpy. Writing a fortran module and importing that via f2py is usually very performant and you only need to write the inner-most bits in Fortran.\n\nIn practice, I usually just Numba things that need to be numba'd and sometimes resort to PyCUDA with the inner loop in CUDA.",
            "Yes",
            "I have some articles and a talk linked on my website about this sort of thing: https://thomasnyberg.com/\n\nTo be fair, I would have presented the problem very differently if I did it again. I'd be less \"high-level\" and instead focus more directly on the pybind11 package and its usage. But maybe it's helpful for you.\n\nedit: Looking my articles over, I'm convinced the stuff I did really hasn't aged that well at all. The three articles I wrote might help understanding, but they seem to all use the C api directly as opposed to using something like pybind11 (which is what I'd recommend). The video I have linked there at least talks about pybind11, but I think I could have presented it better. Anyway maybe I should stop shitting on my past work now. :)",
            "If you are from a science background and know python but want more speed, have you taken a look at Julia? The syntax is very similar (but watch out for 1-indexed arrays!) and it has a lot of support from the scientific community",
            "You could look into Pandas and numpy.",
            "I\u2019m an aerospace engineer and you\u2019re better off learning numpy and scipy first.  If you still need your code to be faster after that, go ahead.",
            "Have you tried using Julia for some of these computations?",
            "Can you use the Python library JAX instead of C++?",
            "how do you even go to the area where you can write code in visual studio 2019",
            "C++ offers very little benefit over properly vectorized Python code using Numpy. Are you sure you can't vectorize the critical path somehow?"
        ]
    },
    "ixzcum": {
        "author": "Im__Joseph",
        "subreddit": "Python",
        "created": "23/09/2020 00:00:13",
        "distinguished": "moderator",
        "fullname": "t3_ixzcum",
        "downs": 0,
        "num_comments": 20,
        "title": "Wednesday megathread: Beginner questions",
        "view_count": null,
        "score": 8,
        "url": "https://www.reddit.com/r/Python/comments/ixzcum/wednesday_megathread_beginner_questions/",
        "comments": [
            "What tutorials I should take for a beginner?",
            "New guy here, can someone give me a recommendation on a good IDE for python?",
            "Hello guys...\n\nSo I'm new to python, but have some experiences in programming like C# and Java.\n\nI started learning python just about a month or 2 ago. And I put myself to a project, so I can face some real life problems.\n\nThis is my project, It's a piece of program for Windows, that just like an alarm, but it's not...\n\nThe program is simple, there is a sqlite file containing a timetable, when the system time matches the time from tha database,\n\nWindows will automaticly logout from the user account.\n\n&#x200B;\n\nI've made 2 python files. One for fetch a timetable from a website, and save it on a sqlite database file.\n\nThe other one is the main program.\n\n&#x200B;\n\nI used schedule module for schedule the task for everyday. And it uses string for time like this \"12:50\".\n\nAnd plyer module for show notification.\n\nMy problems is, I need to show a notification 5 mins before or after the time like \"12:55\" or \"15:45\"\n\n&#x200B;\n\nThis is my git repo [https://github.com/iamilham/PC-Detoxer-Project](https://github.com/iamilham/PC-Detoxer-Project)\n\n&#x200B;\n\n**Project isn't neat, so bear with it. \ud83d\ude01**",
            "How would I write a boolean function that returns True when the given positive integer contains an odd number of digits(using simple python operators)?",
            "    x = ('' 5+6 '')\n\nHow do I print out the value 11 ?",
            "Hey guys,\n\nI'd like to know whether it's good or bad practice to use the self attributes in class methods excessively, e.g.:\n\n&#x200B;\n\n    class Bla:\n        def __init__(self, a, b, c):\n            self._a = a\n            self._b = b\n            self._c = c\n    \n        def do_smth(self):\n            bla = self._a\n            if self._b < self._c:\n                self._a = self._c - self._b\n                do_smth_else(self._a)\n            return self._c\n\nNote that this is not real code but just something I made up on a whim haha.\n\nI got the feeling that this looks kinda messi so I'm not sure if that's common practice or not. Should I rather use getter and setter instead?",
            "Hello community!\n\nNew to Python, I\u2019m attempting to read a CSV/EXCEL sheet using pandas, however I\u2019m running into trouble how writing that code, regardless if the desired dataset comes from online or locally. Any help with this?"
        ]
    },
    "ixgobe": {
        "author": "xX__NaN__Xx",
        "subreddit": "Python",
        "created": "22/09/2020 04:31:47",
        "distinguished": null,
        "fullname": "t3_ixgobe",
        "downs": 0,
        "num_comments": 12,
        "title": "I made a pathfinding visualizer (Code Below) [Feedbacks appreciated]",
        "view_count": null,
        "score": 191,
        "url": "https://www.reddit.com/r/Python/comments/ixgobe/i_made_a_pathfinding_visualizer_code_below/",
        "comments": [
            "Why did you choose the algorithm you did?",
            "Nice video, but that Music, please. Don't.",
            "\ud83d\ude0d\ud83d\ude0d",
            "this is great",
            "The only thing I have a comment on is the music; not necessary and makes it seem unprofessional tbh. Otherwise great work!",
            "By the way, Dijkstra algorithm is completely replacable by BFS when all edges on graph(adjacent cells in this case) have same edge weight.",
            "wtf  - \"Don't forget to like\" - Aaand closed and downvoted."
        ]
    },
    "iy6npu": {
        "author": "sarthkum0488",
        "subreddit": "Python",
        "created": "23/09/2020 09:03:53",
        "distinguished": null,
        "fullname": "t3_iy6npu",
        "downs": 0,
        "num_comments": 0,
        "title": "PYTHON LIVE SESSION For Beginners- Day 7",
        "view_count": null,
        "score": 0,
        "url": "https://www.youtube.com/watch?v=XYlpFzXA9O8&feature=share",
        "comments": []
    },
    "iy5n5p": {
        "author": "kaddkaka",
        "subreddit": "Python",
        "created": "23/09/2020 07:29:06",
        "distinguished": null,
        "fullname": "t3_iy5n5p",
        "downs": 0,
        "num_comments": 1,
        "title": "LSP server",
        "view_count": null,
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/iy5n5p/lsp_server/",
        "comments": [
            "pyls\\_ms seems to update very seldom, last release: Jun 6, 2019"
        ]
    },
    "iy5hyd": {
        "author": "hype_beast420",
        "subreddit": "Python",
        "created": "23/09/2020 07:16:19",
        "distinguished": null,
        "fullname": "t3_iy5hyd",
        "downs": 0,
        "num_comments": 1,
        "title": "A simple URL shortener using Flask (website in comments)",
        "view_count": null,
        "score": 1,
        "url": "https://www.youtube.com/watch?v=YI16KWyA3M0",
        "comments": [
            "**Website**: [https://tinyurlanish.herokuapp.com/](https://tinyurlanish.herokuapp.com/)\n\n**Code:** [https://github.com/Anish-Malla/URL-shortener](https://github.com/Anish-Malla/URL-shortener)"
        ]
    },
    "ixy30m": {
        "author": "MaximilianBornstaedt",
        "subreddit": "Python",
        "created": "22/09/2020 22:43:49",
        "distinguished": null,
        "fullname": "t3_ixy30m",
        "downs": 0,
        "num_comments": 0,
        "title": "Research Project: Collaborated Code Reviews using Customised Static Code Analysis (Python, C#, Go, PHP)",
        "view_count": null,
        "score": 6,
        "url": "https://www.reddit.com/r/Python/comments/ixy30m/research_project_collaborated_code_reviews_using/",
        "comments": []
    },
    "iy6w7g": {
        "author": "blackheartredeye",
        "subreddit": "Python",
        "created": "23/09/2020 09:26:02",
        "distinguished": null,
        "fullname": "t3_iy6w7g",
        "downs": 0,
        "num_comments": 0,
        "title": "How to add Python Code to your Blog or webpage?",
        "view_count": null,
        "score": 0,
        "url": "https://pysnakeblog.blogspot.com/2020/01/how-to-add-python-code-to-your-blog-or.html",
        "comments": []
    },
    "ixkwxw": {
        "author": "Fedzbar",
        "subreddit": "Python",
        "created": "22/09/2020 10:37:44",
        "distinguished": null,
        "fullname": "t3_ixkwxw",
        "downs": 0,
        "num_comments": 3,
        "title": "Python In-Depth Bytecode series - list comprehensions, generators, walrus operator deconstructed",
        "view_count": null,
        "score": 30,
        "url": "https://www.reddit.com/r/Python/comments/ixkwxw/python_indepth_bytecode_series_list/",
        "comments": [
            "Cool series Fedz",
            "I'll definitely give it a chance. Always wanted to know the way the interpreter works"
        ]
    },
    "ixkr78": {
        "author": "cool-RR",
        "subreddit": "Python",
        "created": "22/09/2020 10:24:36",
        "distinguished": null,
        "fullname": "t3_ixkr78",
        "downs": 0,
        "num_comments": 4,
        "title": "Live-coding a music synthesizer (EuroPython 2020)",
        "view_count": null,
        "score": 27,
        "url": "https://www.youtube.com/watch?v=SSyQ0kRHzis",
        "comments": [
            "Nice bass \ud83d\udc4d",
            "Nice video. I really like how you code what you want your class to do, and then go back and fill in the blanks. I might pinch this technique",
            "I wonder why they cut at 24:14 ? very cool video anyways, thanks for sharing!"
        ]
    },
    "ixx2pf": {
        "author": "sarthkum0488",
        "subreddit": "Python",
        "created": "22/09/2020 21:46:35",
        "distinguished": null,
        "fullname": "t3_ixx2pf",
        "downs": 0,
        "num_comments": 1,
        "title": "How Uni Codes in Python are Processed",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/ixx2pf/how_uni_codes_in_python_are_processed/",
        "comments": [
            "this should be posted in /r/learnpython"
        ]
    },
    "iy0ixq": {
        "author": "Shwayz197",
        "subreddit": "Python",
        "created": "23/09/2020 01:12:03",
        "distinguished": null,
        "fullname": "t3_iy0ixq",
        "downs": 0,
        "num_comments": 2,
        "title": "HackerType - a CLI tool to make yourself l33t.",
        "view_count": null,
        "score": 0,
        "url": "https://www.reddit.com/r/Python/comments/iy0ixq/hackertype_a_cli_tool_to_make_yourself_l33t/",
        "comments": [
            "One minor thing I noticed in your code: in argparse, `choices` can accept a range object, so you could change\n\n    parser.add_argument('-fgc', '--fgcolor', type=str, choices=['0','1','2','3','4','5','6','7'], dest='fgc', required=False)\n\nto\n\n    parser.add_argument('-fgc', '--fgcolor', type=int, choices=range(0, 8), dest='fgc', required=False)\n\nA bigger thing I noticed: don't use a bare except (e.g., `except:` ). Always specify the exception type.",
            "Fun ;)"
        ]
    },
    "ixw9dr": {
        "author": "calapranzi",
        "subreddit": "Python",
        "created": "22/09/2020 21:03:33",
        "distinguished": null,
        "fullname": "t3_ixw9dr",
        "downs": 0,
        "num_comments": 6,
        "title": "Any Twisted good resource in 2020?",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/ixw9dr/any_twisted_good_resource_in_2020/",
        "comments": [
            "When I tried to learn twisted then it was the same. Not much A+ quality resources, if any. Your best bet will probably be to read twisted source. Or sources of projects using twisted like scrapy or Autobahn.",
            "I found Expert Twisted by Mark Williams very helpful.\n\n\nhttps://www.amazon.com/Expert-Twisted-Event-Driven-Asynchronous-Programming/dp/1484237412/ref=mp_s_a_1_2?dchild=1&keywords=mark+williams+twisted&qid=1600827207&sr=8-2\n\nAlso, krondo blog is excellent. \n\n\nhttp://krondo.com/an-introduction-to-asynchronous-programming-and-twisted/",
            "Twisted was a great framework in its days, but it's pretty much outdated nowadays.\n\nPython 3 introduced native coroutines and asyncio and this is much simpler and faster than Twisted's approach, which had been necessary because of the limitations of Python 2. Native coroutines and asyncio is the way to go.\n\nIf you're maintaining an existing project that uses Twisted, or if you needed to use a library that's only available in Twisted, then that's fine, the Twisted ecosystem is still pretty healthy and isn't going to go away anytime soon, but I wouldn't recommend Twisted for a new project."
        ]
    },
    "ixw4go": {
        "author": "stetio",
        "subreddit": "Python",
        "created": "22/09/2020 20:56:30",
        "distinguished": null,
        "fullname": "t3_ixw4go",
        "downs": 0,
        "num_comments": 1,
        "title": "An ASGI Server from scratch",
        "view_count": null,
        "score": 2,
        "url": "https://youtu.be/FNBxYyeti-s",
        "comments": [
            "This is my EuroPython talk that shows how you can build an ASGI server in Python. It comes with these [slides](https://docs.google.com/presentation/d/1ls0OOa9Qpl6-Z3vwLm5fpApH9utEa6AAsYoxR7mUU_I/edit?usp=sharing) and this [repository](https://github.com/pgjones/asgi_server_from_scratch). It is based on my experience writing [Hypercorn](https://gitlab.com/pgjones/hypercorn).\n\nHope it proves interesting - it is an advanced talk. Happy to answer any questions."
        ]
    },
    "iy3h07": {
        "author": "ai_basics",
        "subreddit": "Python",
        "created": "23/09/2020 04:26:07",
        "distinguished": null,
        "fullname": "t3_iy3h07",
        "downs": 0,
        "num_comments": 0,
        "title": "Regression metrics from scratch",
        "view_count": null,
        "score": 0,
        "url": "https://youtu.be/vUp3I6PEL2Q",
        "comments": []
    },
    "ixw0ak": {
        "author": "dulldata",
        "subreddit": "Python",
        "created": "22/09/2020 20:50:21",
        "distinguished": null,
        "fullname": "t3_ixw0ak",
        "downs": 0,
        "num_comments": 0,
        "title": "Reading HTML tables as Pandas Dataframe",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/ixw0ak/reading_html_tables_as_pandas_dataframe/",
        "comments": []
    },
    "iwt09a": {
        "author": "Gautam-j",
        "subreddit": "Python",
        "created": "21/09/2020 03:52:04",
        "distinguished": null,
        "fullname": "t3_iwt09a",
        "downs": 0,
        "num_comments": 261,
        "title": "End-to-End Self Driving Car - Need For Speed",
        "view_count": null,
        "score": 3567,
        "url": "https://v.redd.it/48358seyafo51",
        "comments": [
            "This gave me anxiety",
            "Link to code: [GitHub](https://github.com/Gautam-J/Self-Driving-Car)",
            "Bravo man that's really cool. In need of refinements, but nothing comes out perfect the first time, and I'm still really impressed.",
            "I imagine the minions from Despicable me trying to drive with one on each pedal, 2 at the wheel and 1 giving instructions...",
            "He's clearly had a few",
            "Hi, I'm new to this can you explain how you integrated the code with the game?",
            "Off topic but I need to know is that NFSWorld or just my nostalgia? Great job btw!\n\nEdit: typo",
            "My boi doesn't have side mirrors anymore.\nThis is really cool lmao",
            "Infraction: Driving under influence",
            "Seems kinda jerky. Maybe add a control filter? You could just implement a simple low pass filter on the output.",
            "Whoa super cool!!",
            "Driving better than some of the taxi drivers out here in South Korea.",
            "Because the AI is now limited to choosing left and right, you might be able to improve this by adding a third input called \"straight\". This will fix the swerving of the car.",
            "Can you provide your script you made? Maybe a github link.",
            "That's pretty cool. I guess you mixed your two passions: games & python. It's fun how you can see the never-aging classic terminal alongside top graphics \ud83d\udc4d",
            "*Uber engineers would like to know your location, and availability*",
            "Kept watching expecting for it to improve itself haha. This is great!! Well done.",
            "This is actually an amazing model, Go tweet Elon",
            "Reminded me \u201cThe wolf of Wall Street\u201d driving scene.",
            "Lol",
            "Great project. I've always wanted to do something similar but never got time to. Btw, is the AI cheating with the mini map on the lower left?",
            "This is so great. \n\nI recently watched Sentdex's video on Self driving car in GTA 5. Totally amazing. He also ran into errors time to time, it was fun to see him fixing those quickly.",
            "Does the AI have a target?  Or is it just trying not to crash?  How are you managing speed?   \n\nI really like that this is from screengrabs only.  It makes the problem it much more difficult and more similar to the real world.",
            "Maybe You should add \"do nothing\" as an action, so your AI has option to go in a straight line.",
            "Pretty damn amazing!",
            "Lol *nevermind",
            "this is how your BMW goes when it breaks down while racing Razor in the beginning of the game",
            "Are you self-taught or a CS student? This is simply amazing",
            "You're really making it hard to \"crawl,walk,run\" with learning about Neural Nets.",
            "Totally awesome. Great work!!",
            "Can he beat Razor? (Very cool btw)",
            "Did you know that if you look closely, there are stripes painted on the road that tells you where you're supposed to drive? Just kidding, you've actually got it to sort of work, which is a far cry better than I ever have!\n\nI bet this experience has affected your will to get into a real life \"self driving\" vehicle though. Imagine poor road quality, clusters of road signs and traffic lights, bad weather, pedestrians, bicycles everywhere and a confused driver with hazard blinkers making a right hand turn from the left lane :-/",
            "Nice. Now just send it to elon to push it in next tesla update \ud83d\ude00 \nI think it is ready for test in prod",
            "I think I have seen this project on Silly Hack.",
            "0:31 AI: Red light? Noop. I'll just run this yellow one.",
            "Nice you used 2006 nfs most wanted.",
            "Gonna try this on my tesla",
            "Ah NFS MW 2005, u cut off when it detected cop presence, also how did u link code with the game ?",
            "Did you follow the self driving car in GTA tutorial or something?",
            "Hey man really good \ud83d\ude42 just forked haha",
            "If the real self driving car moves like this, then I can proudly say that it's better at driving than me",
            "Can you give me a thought of how you managed to make the program \"read\" the screen?",
            "Dude that's amazing!",
            "How long did it take you to build this ? So COOL",
            "Bro you got a job at Nikola waiting for you",
            "That\u2019s really awesome! \n\nI see that you have left/right/warning. Do you happen to have a straight as well?",
            "Give it an option to go forward without turning you might have better luck",
            "Hey Gautam-j this is excellent. Very neat! I couldn\u2019t even make self driving dinosaur on google chrome offline page. \n\nYeah as discussed above having multiple views would be useful! You could use the different camera views for more data in each frame.",
            "So was this trained using human data or using reinforcement learning?",
            "Very cool stuff man. Very impressed. I'm just learning Python actually so it's really neat to see stuff like this.   \n\n\nYou're gonna go far my man!",
            "It'd be really nice if you could make an AI that could do multiple different driving simulators just based on what it sees on screen. Then your program might even be able to drive a real car based on camera input.",
            "Ai be playing gta no traffic laws no nothing. Zero fucks given. Respect tho",
            "Awesome man! I\u2019m currently taking AI this semester, so this was fun for me to watch!",
            "That reminds me of the time I worked for Nvidia quite a few years ago, filming a video of their first self driving car that only used one webcam to drive on the NJ streets. I was strapped to the open trunk of a van in front of the sled driving car prototype with my Steadicam sticking out the back. Every second I was thinking, please don\u2019t go crazy on me. A couple of times I saw the car veering a bit and the driver rushed to grab the wheel.",
            "It went through a red light",
            "Lol traffic rules",
            "Step 2: write it for gta5\u2019s oppressor and just ruin servers.",
            "Reminds me of the time Sentdex created a self driving AI in GTA V: [https://www.youtube.com/playlist?list=PLQVvvaa0QuDeETZEOy4VdocT7TOjfSA8a](https://www.youtube.com/playlist?list=PLQVvvaa0QuDeETZEOy4VdocT7TOjfSA8a)\n\nMakes me want to go back and watch that again!",
            "You should consider adding a \"drive straight\" `elif` :)",
            "I wish Teslas were able to show us the commands they \u201cthink\u201d when driving Autonomously!!!",
            "Nice! At how many fps is the network running? I find it very nice that it's working only on screen captures.",
            "Think you're ahead of tesla and uber. Time to make ur startup",
            "Autopilot is the future",
            "Bang-bang controls are... not ideal for that kind of thing. (the steerage seems to be using that scheme)\n\nIs analog control an option in this game? If so, a [PID controller](https://en.wikipedia.org/wiki/PID_controller) is something you should look into!",
            "Drunk driver mode activated. Lol.",
            "How long have you been coding bro?",
            "Oh man i went on an uber with a driver that drove like that my stomach hurt so much after that ride. I couldn't even ask politely please drive a little smoother before I felt sick.",
            "Omg i wanna do this when i grow up! Tysm fr inspiring me w(\u00b0\uff4f\u00b0)w",
            "if only it turn smooth",
            "AI in games coming to a whole new level guys. BIG time, BIG time",
            "It's so easy, why is Tesla charging so much for this technology?!",
            "Fantastic post.  Thanks for sharing!",
            "NFS Most Wanted 2005",
            "Impressive man good job. Are you comfortable sharing what you do for a living?",
            "The drive is not smooth at all.",
            "This just gave me goosebumps...",
            "/r/therewasanattempt to make a self driving car"
        ]
    },
    "iy8ul5": {
        "author": "unimonkiez",
        "subreddit": "Python",
        "created": "23/09/2020 12:09:53",
        "distinguished": null,
        "fullname": "t3_iy8ul5",
        "downs": 0,
        "num_comments": 12,
        "title": "python sucks",
        "view_count": null,
        "score": 0,
        "url": "https://www.reddit.com/r/Python/comments/iy8ul5/python_sucks/",
        "comments": [
            "Nop, I love the language; I think the main problem here is not having a senior python dev with good teaching skills of good practice and python specific features.",
            "Not frustrated. It is quite a powerful language and the only one I know. I managed to brick my laptop by accident with it.",
            "If using flask \u2014reload is an option",
            "I use ipython instead of the standard idle for autoreload capabilities.\n$ %load_ext autoreload\n$ %autoreload 2\n\nThis is good enough for me.",
            "Hello! I'm a bot!\n\nIt looks to me like your post might be better suited for r/learnpython, \na sub geared towards questions and learning more about python **regardless of how advanced your question might be**. \nThat said, I am a bot and it is hard to tell.\nPlease follow the subs rules and guidelines when you do post there, it'll help you get better answers faster.\n\nShow /r/learnpython **the code you have tried and describe in detail where you are stuck.** \nIf you are getting an error message, include the full block of text it spits out.\nQuality answers take time to write out, and many times other users will need to ask clarifying questions. Be patient and help them help you. \n\nYou can also ask this question in the [Python discord](https://discord.gg/3Abzge7), \na large, friendly community focused around the Python programming language, open to those who wish to learn the language \nor improve their skills, as well as those looking to help others. \n\n\n\n***\n\n[^(README)](https://github.com/CrakeNotSnowman/redditPythonHelper) \n^(|)\n[^(FAQ)](https://github.com/CrakeNotSnowman/redditPythonHelper/blob/master/FAQ.md) \n^(|)\n^(this bot is written and managed by /u/IAmKindOfCreative) \n\n\n\n^(This bot is currently under development and experiencing changes to improve its usefulness)",
            "I like Python for the ability to NOT have to type everything.  I do use type hints occasionally, but usually only when it's helping to document the internals of more complex data structures. I don't rely on it for anything else, maybe because I've been using Python since before type hints were even built into the language.  To be fair, I'm not usually working with a massive code base and a hundred other developers either.\n\nI do know other developers that hate Python as well, and it usually comes down to the typing issue.  They can't live without it, and I get that.  If Java is a language that you enjoy using, I can certainly see why you might hate Python.  But if you are trying to use every tool available to get Python types to work like other languages, I'd question why you are using Python in the first place if that is something that is so important to you?  It's not like it should be a surprise that static typing isn't a core feature of the language.",
            "Python has its place. It's not a compiled language. It's not good for making ultra low latency services or massive codebases with 1000+ developers. It's not good for embedded systems or building databases.\n\nPython excels as a glue language. It  is fantastic syntax for everyday work. For a great 90%+ of use cases, Python will work perfectly well in the  hands of a competent developer.",
            "I love python for smaller projects but I think I would go mad with larger ones.  You really need good testing coverage to catch some of the odd bugs.  Trying to do anything involving more than one process is also an exercise in frustration as you try to deal with all of the obscure ways that things can, and do, go wrong.  \n\nThankfully with batteries included you generally don't need sprawling code bases to do anything and everything.  Most of what I've needed to do is in the range of thousands of lines rather than 10's of thousands.\n\nI find it interesting that you think duck typing is bad in python but seem to be okay with JS which, in my mind, is far worse in that regard.  The behavior and syntax for async in JS is odd."
        ]
    },
    "ixymnl": {
        "author": "JMichaelMaddog",
        "subreddit": "Python",
        "created": "22/09/2020 23:16:15",
        "distinguished": null,
        "fullname": "t3_ixymnl",
        "downs": 0,
        "num_comments": 6,
        "title": "Scilearn",
        "view_count": null,
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/ixymnl/scilearn/",
        "comments": [
            "It\u2019s a probability of being in a given class (e.g., greater than 200).  That gets mapped to an integer, but you can access the probability directly.\n\nIt\u2019s sounds like you want multi-class and multi-output (date and price).",
            "Probality / accuracy: pretty straight forward:\n\nAfter running the branch tests,  it was determined that there was  100% that the price is equalivalent to market price(same), the selling date was after the request date therefore it was approved\n\nPretty straight forward\n\nAfter running the tests, it was determined that there was 100% accuracy that the price was below the market price(less than), the selling date was before the request date therefore it is disapproved.\n\n\nAfter running test it was 87% accurate the address of 48 Adair street houston, TX is equivalent to 48 Adere street Houston, Tx",
            "Think i found something to build on just need to find out how to create the tree and algorithm classifier\nGeeksforgeeks.org/rule-based-classifier-machine-learning\n\nThe point I'm making is to know if this methodology can still be used even though we know if it is this, then it is definitely this.?\n\nWe know if it occurred before Jan 1st it is approved."
        ]
    },
    "ixrqq8": {
        "author": "FanSciFi",
        "subreddit": "Python",
        "created": "22/09/2020 17:15:01",
        "distinguished": null,
        "fullname": "t3_ixrqq8",
        "downs": 0,
        "num_comments": 24,
        "title": "Anyone have a **kwargs example that clearly showcases a benefit to using **kwargs over positional arguments or *args?",
        "view_count": null,
        "score": 4,
        "url": "https://www.reddit.com/r/Python/comments/ixrqq8/anyone_have_a_kwargs_example_that_clearly/",
        "comments": [
            "When building a decorator you will have no idea what the decorated function will bring, so you must pasd them along as *args and **kwargs.",
            "Keyword arguments allow you to specify defaults, but they also read much better. What does this function do?\n\n```\nfetch(\"s3://file.txt\", 5, True)\n```\n\nCompared to this:\n\n```\nfetch(\"s3://file.txt\", delay=5, retry=True)\n```\n\nUsing kwargs also means that Python can check your arguments so that even if you pass them in out of order, the function will work as intended.",
            "If you're using multiple inheritance, **kwargs is pretty much the only way you can pass arguments into the constructor that won't bite you in the ass at some point in the future.",
            "**kwargs are a good use for configurable api/functions. And plus it helps in easily building the argument list programmatically, while using a builder pattern. kwargs in theory is a dictionary, so the function can treat its argument list like a dictionary and do things, like, argument access via a string key in a downstream call.",
            "One example I have used is when you have some helper method for a REST API, but the method only helps you with some parameters, but the REST API has more than what the method helps you with (to do some extra processing on your input for ease of use, or to simply define required values). You can then use \\*\\*kwargs to get any extra arguments as a dict that you just merge with your processed arguments. You don't have to care about what they are, it's up to the user if your method to make sure the keywords and values are valid for the REST API.",
            "I have a function in many of my projects for debugging and logging called \"pprint_kwargs\" or \"pk\". So I write something like this:\n\n```\npk(title=title,root=element1,json=j)\n```\n\nand it prints something like this:\n\n```\n**************************\ntitle = 'super duper title'\n\nroot =\n<A>\n     <B>123</B>\n</A>\n\njson =\n{\n    \"abc\":123,\n    \"aaa\": [1,2,3]\n}\n```\n\nSo it pretty prints whatever variables I provide (string, array, json, lxml elements, more) with different behavior based on their type, and labels them with the kwargs key.\n\nThe decorator comments here are more powerful examples, but this one is unique and very useful too.\n\n```\ndef pprint_kwargs(**kwargs):\n```\n\nkwargs is just shorter syntax. You could accomplish the same thing like this:\n\n```\npprint_kwargs({\"title\":title,\"root\":element1,\"json\":j})\n\ndef pprint_kwargs(kwargs):\n```",
            "This is from mobile do bear with me\n\nI think the use case for *args **kwargs is when you want to handle variable arguments to a function. Consider a function that constructs a query string to make requests to an API. **kwargs handles this neatly by passing all the kV pairs.\n\n```python\ndef create_url(**kwargs):\n    query_string = '&&'.join([f'{k}={v}' for k, v in kwargs.items()])\n   url = 'www.example.com?' + query_string\n   return url \n```",
            "Django ORM uses kwargs extensively. For example, you can use `Person.objects.filter(last_name__like=\"Smith%\")` to find all people in your database that have a last name that starts with \"Smith\".",
            "When I want to send a message to a file and to the stdout I use this function:\n\n    def print2(*args, **kws):\n        print(*args, **kws)  # write to a file or stdout\n        if 'file' in kws:  # did we just write to a file?\n            del kws['file']  # remove the file keyword\n            print(*args, **kws)  # write to stdout\n\nUse `print(...)` or `print2(...)` to write to stdout only. Use `print(..., file=openFIle)` to write to an open file. Use `print2(..., file=openFile)` to write to both stdout and an open file.",
            "Earlier today I wrote one.\n\nI had a function that needed to compute some statistics on a dataset, and for that it sometimes needs a set of scaling factors that can be downloaded from a database.\n\nNow one way to do this would be to pull the scaling factors outside the function and pass them as a parameter:\n\n    scaling_factors = pull_factors(db_user, db_password, job_id)\n    compute(input_data, scaling_factors)\n\nbut it turns out I don't always do scaling. Only under certain conditions that the compute function would know about does one need scaling factors. So why pull the factors from a slow DB connection if you don't need them? Why risk some exception trying to pull the data if it may not exist in the DB? It makes more sense to call `pull_factors` inside `compute` only when needed.\n\nBut now the signature to compute is f-ugly:\n\n     def compute(input_data, db_user, db_password, job_id):\n\nThat's confusing and weird. Why does `compute` have a username and password. Its performing a computation like `median` it shouldn't take these database arguments (and in many cases it doesn't need them).\n\nThere are a variety of ways of solving an issue like this. You can encapsulate things in objects, you can pass structured types like `namedtuples`... but `kwargs` are a quick easy and very flexible solution.\n\n    def compute(input_data, **other_args):\n         if need_factors:\n            scaling_factors = pull_factors(**other_args)\n         ....\n\nAdditionally if you have adopt this approach with multiple layers each layer can `pop` the arguments they consume from `other_args` before passing what is left to the next function.\n\nA great example of this pattern being (ab)used is matplotlib. It can be a bit much at times, but it is also somewhat elegant and easier to understand what is going on than trying to define some complicated object with a lot of state (font, fontsizes, colors, etc...) only some of which may need to be populated prior to calling `plot`.",
            "Suppose you wanted to write a function that summed the positional arguments.\n\nHere is an example with three positional arguments\n\ndef f(a,b,c): return a + b +c\n\nIt would be annoying if you had to write another function to sum 4 positional arguments\n\nInstead, you would use\n\ndef f(\\*args): return sum(args)"
        ]
    },
    "ixtcwk": {
        "author": "Gbeast212",
        "subreddit": "Python",
        "created": "22/09/2020 18:36:14",
        "distinguished": null,
        "fullname": "t3_ixtcwk",
        "downs": 0,
        "num_comments": 0,
        "title": "Transfering Youtube Subscriptions from one account to another",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/ixtcwk/transfering_youtube_subscriptions_from_one/",
        "comments": []
    },
    "ixn5ej": {
        "author": "fahim6393",
        "subreddit": "Python",
        "created": "22/09/2020 13:14:57",
        "distinguished": null,
        "fullname": "t3_ixn5ej",
        "downs": 0,
        "num_comments": 0,
        "title": "Want to share Interview Preparation Courses",
        "view_count": null,
        "score": 4,
        "url": "https://www.reddit.com/r/Python/comments/ixn5ej/want_to_share_interview_preparation_courses/",
        "comments": []
    },
    "ixpaz6": {
        "author": "ACMLearning",
        "subreddit": "Python",
        "created": "22/09/2020 15:13:29",
        "distinguished": null,
        "fullname": "t3_ixpaz6",
        "downs": 0,
        "num_comments": 0,
        "title": "September 23: Free Talk with Emery Berger on Optimizing Application Performance",
        "view_count": null,
        "score": 3,
        "url": "https://www.reddit.com/r/Python/comments/ixpaz6/september_23_free_talk_with_emery_berger_on/",
        "comments": []
    },
    "ixr5ck": {
        "author": "McDic2",
        "subreddit": "Python",
        "created": "22/09/2020 16:44:43",
        "distinguished": null,
        "fullname": "t3_ixr5ck",
        "downs": 0,
        "num_comments": 3,
        "title": "Looking for people who would like to criticize my project",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/ixr5ck/looking_for_people_who_would_like_to_criticize_my/",
        "comments": [
            "Do you think you would get feedback in /r/learnpython?",
            "Thoughts: Senior level python developer\nWhy: impeccable project structure\nVery good readme\nVery well written python code\nOverall nice job!"
        ]
    },
    "ixkfqd": {
        "author": "elcric_krej",
        "subreddit": "Python",
        "created": "22/09/2020 09:57:47",
        "distinguished": null,
        "fullname": "t3_ixkfqd",
        "downs": 0,
        "num_comments": 10,
        "title": "Exceptions as control flow",
        "view_count": null,
        "score": 8,
        "url": "https://blog.cerebralab.com/Exceptions_as_control_flow",
        "comments": [
            "Please never just use `except:` without a specific exception!!!\n\nIn that case you will catch anything, even stuff that is not exceptions!\nThis includes stuff like KeyboardInterrupt, ie. what is raised when pressing Ctrl-c on a running program.\nTry the following yourself\n\n    try:\n        time.sleep(1000)\n        print(\"Done sleeping\")\n    except:\n        print(\"In except block\")\n\n\nAnd then press Ctrl-c to abort.\nIf this happens in the first case of calling `a.quack()` in the first example, the program will take your KeyboardInterrupt and immediately execute bar(), no matter whether it makes sense or how much of `a.quack()` has already been completed.\n\n\"Can I then use `except Exception:`\" you might ask, but even that can be dangerous.\n\nImagine you misspelled the `a.quack()` as `a.quac()`, this would raise an AttributeError, which will cause you to execute the `bar()` command eventhough this is a duck.\n\nYou should always raise and catch the most specific exception you can to avoid such issues. Believe me it is NOT fun to debug a bug where you caught an exception you didn't expect.",
            "I don't think that quoted arguments for why doing this is a bad idea quite hit what I think is the mark.\n\nUsing exceptions for control flow introduces the concept of expected versus unexpected exceptions. Suppose you need to read a configuration file. There are expected ways for this to fail and for the application to react to the problem: the file might be not found (or unreadable), the contents could not be decoded as utf-8, the format could not be parsed, or the required options could be missed. That means that our program is fine but the external world didn't live up to the expectations. So we need to catch such exceptions and tell the user what's the problem.\n\nAnd then there's everything else, including in Python case AttributeError and even AssertionError, which means that our program has a bug, and even if we tried to write it in an exception-safe way (i.e. a failed operation doesn't corrupt global state), clearly we could've failed at ensuring _that_ as well. Continuing from that point is inadvisable and you can't tell the user anything meaningful (i.e. related to anything in their world of files and stuff) about your IndexError or whatever.\n\nThe problem is, you can't reliably discriminate between these two cases. You can try, in this case you can hope that reading the file throws expected IOError and the utf8 codec throws its own well defined exception class, and so does the parser, and the code that checks for required options. Even if you're lucky and that's true, it already would be quite messy. So that would be an equivalent to Java's checked exceptions (except unchecked), but personally I think the Rust approach with explicit Option and Result types is better.\n\nBut if you find yourself catching random KeyErrors and IndexErrors you have no idea if they are coming from where you think they are coming and so are expected or not. And if you are catching generic Exception that means that you completely gave up and are covering up real bugs in your code. Don't do that.\n\nSo if you write/use disciplined code that throws specific exception classes for its expected exceptions, and you catch those specific exceptions, that's messy but OK. Also OK is using exceptions as an actual control flow mechanism, i.e. to do a nonlocal return deep from the parser and never propagate that particular exception class to the outside code. But catching generic/all exceptions is bad.",
            "An interesting blog post about using the \"EAFP\" (Easier to Ask for Forgiveness than Permission) idiom, little or nothing to do with control flow. I mostly agree with the premise, but the blog post fails to make a good case for it:\n\n- the post doesn't actually show exceptions used for control flow;\n- the post is full of silly spelling and grammatical errors, some of which are distracting enough to hurt readability of the post;\n- the code is mostly Mickey Mouse toy code that fails to illustrate the usefulness of the EAFP idiom;\n- using bare `except` is *nearly* always not just an anti-pattern, but possible [the most diabolical anti-pattern](https://realpython.com/the-most-diabolical-python-antipattern/);\n- and the author's code examples are not great examples of Python code.\n\nThe author of this blog post thinks that float INFs are NANs, and the fact that `math.isnan(INF)` returns False wasn't enough to clue them into correcting their misunderstanding \ud83d\ude41\n\nApparently, checking the documentation and discovering `math.isfinite` was also beyond them.\n\nThe author then goes on to describe a six line function, chaining two conditions: \"It's a somewhat complex function\"\n\nWow. Imagine if this person saw some real code with, oh, thirty or forty lines. Their head would probably explode.\n\nEfficiency-wise, Python exceptions actually are quite slow. Raising and catching an exception is an expensive operation. If you care about speed, you generally want to avoid exception handling, if possible, and beware of hidden exceptions buried inside functions. Of course, sometimes clarity is more important than speed.\n\nThe author suggests this little snippet:\n\n    if sum([not isinstance(x,float) for x in arr]) == 0\n\nOuch! Better:\n\n    if any(not isinstance(x, float) for x in arr)\n\nwhich is not only more readable, but bails out early as soon as the condition fails.\n\nThe replacement code using exception handling uses `assert`. Perhaps the author is unaware that assert can be disabled by the end user, turning the code into:\n\n    try:\n        for x in arr: \n    \t    pass\n        mutable_func_1(arr)\n    except:\n        mutable_func_2(arr)\n\nMore importantly, **any exception** inside `mutable_func_1` will then result in `mutable_func_2` being called. Ouch!",
            "Using exception handling as a control structure is useful in some cases, however, please avoid using \"naked\" exception handling (e.g., `except:`).\n\n[https://moserei.de/2017/09/20/python-bare-except.html](https://moserei.de/2017/09/20/python-bare-except.html)\n\nMore details\n\n* [https://docs.python.org/3/library/exceptions.html#BaseException](https://docs.python.org/3/library/exceptions.html#BaseException)\n* [https://docs.python.org/3/library/exceptions.html#exception-hierarchy](https://docs.python.org/3/library/exceptions.html#exception-hierarchy)"
        ]
    },
    "ixq1vu": {
        "author": "james_java",
        "subreddit": "Python",
        "created": "22/09/2020 15:51:25",
        "distinguished": null,
        "fullname": "t3_ixq1vu",
        "downs": 0,
        "num_comments": 1,
        "title": "Scanyp Beta version available",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/ixq1vu/scanyp_beta_version_available/",
        "comments": [
            "Does it work on one file at a time or will read the imports to find my modules?"
        ]
    },
    "ixbibn": {
        "author": "dumblechode",
        "subreddit": "Python",
        "created": "21/09/2020 23:03:12",
        "distinguished": null,
        "fullname": "t3_ixbibn",
        "downs": 0,
        "num_comments": 8,
        "title": "Black for Jupyter Notebook and JupyterLab",
        "view_count": null,
        "score": 47,
        "url": "https://www.reddit.com/r/Python/comments/ixbibn/black_for_jupyter_notebook_and_jupyterlab/",
        "comments": [
            "I prefer [jupyterlab-code-formatter](https://jupyterlab-code-formatter.readthedocs.io/en/latest/). It adds formatting options under the Edit menu or can be used with shortcuts. Also easily configurable.",
            "Hmm this actually work?",
            "Black is not a superset of PEP-8. I've said this time and time again. It is also visually ugly."
        ]
    },
    "ixj3pw": {
        "author": "MotasemHa",
        "subreddit": "Python",
        "created": "22/09/2020 07:51:18",
        "distinguished": null,
        "fullname": "t3_ixj3pw",
        "downs": 0,
        "num_comments": 0,
        "title": "How To Modify Python Exploits Like a Developer | Cyberseclabs Fuel Walkt...",
        "view_count": null,
        "score": 8,
        "url": "https://www.reddit.com/r/Python/comments/ixj3pw/how_to_modify_python_exploits_like_a_developer/",
        "comments": []
    },
    "ixte2n": {
        "author": "hanpari",
        "subreddit": "Python",
        "created": "22/09/2020 18:37:50",
        "distinguished": null,
        "fullname": "t3_ixte2n",
        "downs": 0,
        "num_comments": 0,
        "title": "EuroPython \u201cAsk me Anything\u201d",
        "view_count": null,
        "score": 1,
        "url": "https://dev.to/europython/europython-ask-me-anything-4co8",
        "comments": []
    },
    "ixsy7d": {
        "author": "duisterethomas",
        "subreddit": "Python",
        "created": "22/09/2020 18:15:57",
        "distinguished": null,
        "fullname": "t3_ixsy7d",
        "downs": 0,
        "num_comments": 1,
        "title": "I created a program that opens new youtube video's in my subscription list",
        "view_count": null,
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/ixsy7d/i_created_a_program_that_opens_new_youtube_videos/",
        "comments": [
            "This should be a feature"
        ]
    },
    "iwzbzs": {
        "author": "Aboghazala",
        "subreddit": "Python",
        "created": "21/09/2020 12:21:15",
        "distinguished": null,
        "fullname": "t3_iwzbzs",
        "downs": 0,
        "num_comments": 28,
        "title": "created some customized tkinter widgets with a 3d looking",
        "view_count": null,
        "score": 246,
        "url": "https://i.redd.it/p758he42uho51.png",
        "comments": [
            "Is it pure Tkinter? It looks very nice. I remember using Tkinter a while back and it being complicated to work with. How is it now?",
            "Can you share the code? Thanks",
            "Nice Neumorphism!",
            "I almost spilled my coffee when I saw Tkinter in the title.\n\nNice job \ud83d\udc4d",
            "Verry clean man",
            "Sweet.",
            "that looks amazing. great job.",
            "Km",
            "I like tkinter because I learned how to use it, definitely not for its aesthetics. This looks amazing and it's hard to believe it's really tkinter, good job!",
            "i don't have premium , so here have this \ud83c\udfc5",
            "Beautiful.  Did you use somebody else ttk theme or did you create your own ?  \nSeriously, if someone were to write a book explaining how to create your own ttk theme from scratch in order to make sexy looking Tkinter interface, I would buy it in a heartbeat (please don't tell me to be the change I want to see in the world T_T)",
            "Holy smokes this is beautiful",
            "Looks great. We are still adding custom widgets to our GUI library and may need to add something similar to this."
        ]
    },
    "ixsdry": {
        "author": "sivafifa",
        "subreddit": "Python",
        "created": "22/09/2020 17:47:59",
        "distinguished": null,
        "fullname": "t3_ixsdry",
        "downs": 0,
        "num_comments": 0,
        "title": "Best Scikit learn: Machine Learning in Python with features and version",
        "view_count": null,
        "score": 0,
        "url": "https://itexamples.com/scikit-learn",
        "comments": []
    },
    "ixsb0f": {
        "author": "Saikat0511",
        "subreddit": "Python",
        "created": "22/09/2020 17:44:06",
        "distinguished": null,
        "fullname": "t3_ixsb0f",
        "downs": 0,
        "num_comments": 1,
        "title": "Why does IDLE lag/stutter when dragging the window in Windows while it works fine on Linux?",
        "view_count": null,
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/ixsb0f/why_does_idle_lagstutter_when_dragging_the_window/",
        "comments": [
            "Not a clue as to why, but this isn't really the place for support questions. Regardless, idle often comes out of the box, but is not a recommended tool for doing python development. You'll want to use a more feature rich environment that suits your tastes, whether it's a text editor like notepad++, gvim, or visual studio code, or a full ide like pycharm."
        ]
    },
    "ixiglq": {
        "author": "Stinocon",
        "subreddit": "Python",
        "created": "22/09/2020 06:54:30",
        "distinguished": null,
        "fullname": "t3_ixiglq",
        "downs": 0,
        "num_comments": 4,
        "title": "UPS-Display: a Python script to show on a e-Ink display stats about your UPS!",
        "view_count": null,
        "score": 8,
        "url": "https://www.reddit.com/r/Python/comments/ixiglq/upsdisplay_a_python_script_to_show_on_a_eink/",
        "comments": [
            "Cool project.  Waveshare makes some nice cost effective peripherals.  I wasn't familiar with the APC Python library, I'll have to check that out.\n\nAs far as your code, would it make more sense to initialize the display outside the while loop, or was there a reason to do that every time?"
        ]
    },
    "ixrzej": {
        "author": "jamesBong_97",
        "subreddit": "Python",
        "created": "22/09/2020 17:27:49",
        "distinguished": null,
        "fullname": "t3_ixrzej",
        "downs": 0,
        "num_comments": 2,
        "title": "Automating UPS label creation",
        "view_count": null,
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/ixrzej/automating_ups_label_creation/",
        "comments": [
            "Ups has the shipping form you need to fill. Ask them if they have automated solution. You also can write a script to place data in ups app."
        ]
    },
    "ixrtpm": {
        "author": "vtemian",
        "subreddit": "Python",
        "created": "22/09/2020 17:19:31",
        "distinguished": null,
        "fullname": "t3_ixrtpm",
        "downs": 0,
        "num_comments": 2,
        "title": "Healthy Python Codebase",
        "view_count": null,
        "score": 0,
        "url": "https://blog.vtemian.com/post/healthy-python-codebase/",
        "comments": [
            "Sorry, lost trust pretty quickly when the first filter function sorted before filtering, doing unnecessary work, changing the input argument on the way..."
        ]
    },
    "ixmwie": {
        "author": "Benegut",
        "subreddit": "Python",
        "created": "22/09/2020 13:00:27",
        "distinguished": null,
        "fullname": "t3_ixmwie",
        "downs": 0,
        "num_comments": 0,
        "title": "Slow Redis Performance with Python Redis",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/ixmwie/slow_redis_performance_with_python_redis/",
        "comments": []
    },
    "ixr5m3": {
        "author": "stellenberger",
        "subreddit": "Python",
        "created": "22/09/2020 16:45:11",
        "distinguished": null,
        "fullname": "t3_ixr5m3",
        "downs": 0,
        "num_comments": 3,
        "title": "Best way to sync a bank account",
        "view_count": null,
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/ixr5m3/best_way_to_sync_a_bank_account/",
        "comments": [
            "Take a look at https://plaid.com/ for building this on a large scale - on a small scale, you'll probably have to resort to screen scraping.",
            "If you want to analyse your own banking data, just log in to your internet banking portal and look for a way to download the data as a csv or Excel file, then load it with Pandas. You might be able to automate the login/download process but I'm not sure the effort is worth the convenience. \n\nHowever, if you plan to make this app publicly available, security concerns make it much more complicated. You don't want to muck about with managing secure storage your users login details (I'm not even sure if it's legal for them to give them to you? It sounds like it should violate the ToS). I think apps like Mint (which have a similar concept) will use third party services that securely manage the users login/syncing."
        ]
    },
    "ixmul3": {
        "author": "z0mbietime",
        "subreddit": "Python",
        "created": "22/09/2020 12:57:07",
        "distinguished": null,
        "fullname": "t3_ixmul3",
        "downs": 0,
        "num_comments": 0,
        "title": "nab3: An async boto3 ORM",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/ixmul3/nab3_an_async_boto3_orm/",
        "comments": []
    },
    "ixmj77": {
        "author": "andy_cavatorta",
        "subreddit": "Python",
        "created": "22/09/2020 12:37:02",
        "distinguished": null,
        "fullname": "t3_ixmj77",
        "downs": 0,
        "num_comments": 1,
        "title": "Coroutine FOMO",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/ixmj77/coroutine_fomo/",
        "comments": [
            "co-routines are more about abstractions to queue management than thread management. With co-routines you'll still need to spin up threads to execute the task queues in different threads but it does cover the simple thread dispatch cases with `concurrent.futures.ThreadPoolExecutor`. So if you are already doing a lot of that work then you're probably all set. Doesn't hurt to check it out, the patterns align a bit better with some of the web-interfacing tech like JavaScript."
        ]
    },
    "ixqb3f": {
        "author": "Martin_dimitrov",
        "subreddit": "Python",
        "created": "22/09/2020 16:03:07",
        "distinguished": null,
        "fullname": "t3_ixqb3f",
        "downs": 0,
        "num_comments": 2,
        "title": "Matplotlib",
        "view_count": null,
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/ixqb3f/matplotlib/",
        "comments": [
            "Well, did you install matplotlib?",
            "cmd line --> pip install matplotlib\n\nAfter doing that, does it work?"
        ]
    },
    "ixm7zi": {
        "author": "blackheartredeye",
        "subreddit": "Python",
        "created": "22/09/2020 12:16:17",
        "distinguished": null,
        "fullname": "t3_ixm7zi",
        "downs": 0,
        "num_comments": 3,
        "title": "Python Tkinter Trick - Writing text on desktop screen using Python Tkinter",
        "view_count": null,
        "score": 2,
        "url": "https://pysnakeblog.blogspot.com/2019/10/python-tkinter-trick-writing-text-on.html",
        "comments": [
            "Doesn't work.\n\nMissing is:\n\n\n    if __name__ == \"__main__\":\n        main = tk.Tk()\n        text(\"You are welcome!\")\n        main.mainloop()"
        ]
    },
    "ixp9i3": {
        "author": "diecosina",
        "subreddit": "Python",
        "created": "22/09/2020 15:11:26",
        "distinguished": null,
        "fullname": "t3_ixp9i3",
        "downs": 0,
        "num_comments": 0,
        "title": "Creative Coding Notebooks",
        "view_count": null,
        "score": 1,
        "url": "/r/creativecoding/comments/ixp7ac/creative_coding_notebooks/",
        "comments": []
    },
    "ixon3v": {
        "author": "Lord_Skellig",
        "subreddit": "Python",
        "created": "22/09/2020 14:39:17",
        "distinguished": null,
        "fullname": "t3_ixon3v",
        "downs": 0,
        "num_comments": 3,
        "title": "Is PySpark what I'm looking for?",
        "view_count": null,
        "score": 1,
        "url": "/r/apachespark/comments/ixom5y/is_spark_what_im_looking_for/",
        "comments": [
            "IIRC if Spark is running on a single machine the \"nodes\" are just threads. In my very amateur opinion, Spark does sound like a possible solution for you.  \n\n\nBut if aren't really concerned wiith speed, it sounds like you can just read your csv line by line either raw, or using a Pandas dataframe but reading in chunks. When reading the dataset only in chunks, whatever algorithm/aggregation you are doing on the data would need to be translated into the style of MapReduce.  \n\n\nSee this blog post I just found for info on chunking and map-reducing in Pandas [https://pythonspeed.com/articles/chunking-pandas/](https://pythonspeed.com/articles/chunking-pandas/)",
            "I would recommend looking into Dask before spark if the issue is just larger than memory: [https://dask.org/](https://dask.org/)",
            "Short answer: No, since you're working with one machine it won't help you. Try with SQL, and then maybe have a talk with your SysAdmin about upgrading hardware.\n\nLong answer:\nSpark is an engine that runs on a distributed computing network (cluster). Yes, it can do those things, but ONLY if you have the hardware (and underlying software) configured like that.\n\nSpark works by being able to allocate the cores and gbs of RAM of all the connected servers in a cluster and using them as one resource. If you had a few machines lying around with tons of RAM and multiple multi-core processors, then all you'd have to do is set up a hadoop cluster (not easy by yourself) and put spark on that and then configure spark to use the cluster. You will still be fighting with YARN memory allocation in three months. \n\nAdditionally, if you're only using one machine, then spark/running spark on a virtual cluster is useless because you'd be allocating the same max resources of that one machine, even if you set it up to be a single node (single machine) cluster.\n\nI think the best thing for you to do is to try the SQL approach first because SQL writes to disk and you can pull in subsets of data and/or read in data line by line. If that's still destroying your RAM, then you should look into spinning up virtual clusters on AWS, uploading your files/databases and THEN Spark and PySpark would be your friend."
        ]
    },
    "ixlaah": {
        "author": "minh_khuong",
        "subreddit": "Python",
        "created": "22/09/2020 11:07:57",
        "distinguished": null,
        "fullname": "t3_ixlaah",
        "downs": 0,
        "num_comments": 1,
        "title": "My python A.I Vevoast (Vector voice assistant)",
        "view_count": null,
        "score": 0,
        "url": "https://www.reddit.com/r/Python/comments/ixlaah/my_python_ai_vevoast_vector_voice_assistant/",
        "comments": [
            "No readme before you put out your repo publically?"
        ]
    },
    "ixkbu6": {
        "author": "aquic",
        "subreddit": "Python",
        "created": "22/09/2020 09:48:13",
        "distinguished": null,
        "fullname": "t3_ixkbu6",
        "downs": 0,
        "num_comments": 14,
        "title": "Sum of range of integers? {Interview Question}",
        "view_count": null,
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/ixkbu6/sum_of_range_of_integers_interview_question/",
        "comments": [
            "Yes. \n\nGood interviewers have multiple goals. Do you actually know how to do the advertised job? Can you think under pressure? How do you react to pressure? \n\nWhat if you mess up an answer? How do you react / recover?\n\nNo one knows everything. Not everyone has had the same educational experience or day to day life choices of someone else. In your example, I know a lot of folks who have never seen the range summation formula. Does that make them bad candidates?\n\nGood luck",
            "It seems like English may not be your first language, so I want to point out that your use of \"regardless\" actually makes your description of the ideal solution incorrect. Be careful using qualifying words like this if you're not 100% certain how they change your meaning!\n\nIn this case - \n\n>  if you want to sum a progression of integers (regardless of whether they are consecutive or there is a fixed increment), the result is  (first+last)\\*n/2 \n\nYou are saying that the solution does not change if the sequence is non-consecutive.",
            "Could you elaborate on why the result in the second solution is (first+last)*n/2?"
        ]
    },
    "ixjxmb": {
        "author": "sarthkum0488",
        "subreddit": "Python",
        "created": "22/09/2020 09:12:22",
        "distinguished": null,
        "fullname": "t3_ixjxmb",
        "downs": 0,
        "num_comments": 0,
        "title": "Python For Beginners - Functions",
        "view_count": null,
        "score": 1,
        "url": "https://www.youtube.com/watch?v=N8m9Ajq1kMc&feature=share",
        "comments": []
    },
    "ix891d": {
        "author": "ancient_bhakt",
        "subreddit": "Python",
        "created": "21/09/2020 20:10:29",
        "distinguished": null,
        "fullname": "t3_ix891d",
        "downs": 0,
        "num_comments": 0,
        "title": "A Command Line utility that downloads torrent files or streams movies directly from terminal. (Only Linux)",
        "view_count": null,
        "score": 10,
        "url": "https://www.reddit.com/r/Python/comments/ix891d/a_command_line_utility_that_downloads_torrent/",
        "comments": []
    },
    "iwtgvj": {
        "author": "Apollo_3_14",
        "subreddit": "Python",
        "created": "21/09/2020 04:24:40",
        "distinguished": null,
        "fullname": "t3_iwtgvj",
        "downs": 0,
        "num_comments": 48,
        "title": "Just made a learning Python Diagram that I made my background to learn terms easier. Let me know what you think.",
        "view_count": null,
        "score": 164,
        "url": "https://i.redd.it/wuvo5ea1hfo51.png",
        "comments": [
            "I' d rather move OOP and inheritance down to the end of a medium(or advanced), pip to basics, environment(because it's complicated and not needed at first) and asyncio to advanced, generators to a medium, and magic methods to the top. Also add classes, because clases not OOP, it just data structure.",
            "Testing is so easy in Python I'd take the opportunity to teach it much earlier. It would also teach good habits of writing your tests early.",
            "maybe move asyncio to advanced with parallelism and concurrency?",
            "Nice, also as a refresher :) aren't map & filter functions recommended to be replaced by list comprehensions?",
            "Why is testing 3rd-to-last in the \"Advanced\" category?\n\nDo you want scripts without docstrings? Because that's how you get scripts without docstrings.\n\nA project with metaclasses and decorators but no automated testing would be setting off all my unmaintainability klaxons.\n\nI'd probably put testing between OOP and Data Structures in the \"Medium\" category. Because it's not just \"do you have testing?\", it's also \"are you designing your structures in a way that enables testing?\".",
            "* comments\n\n* philosophy of python (PEP)\n\n* try except",
            "You might want to check out [the Programmer Competency Matrix](https://sijinjoseph.netlify.app/programmer-competency-matrix/) sometime. It might help you figure out the order of things.",
            "Not my original lists, I just made the diagram.   \nList originally from a Youtube channel Tech with Tim.",
            "Can you also please tell us beginners any free resources to learn python (and other data science languages)\n\nI started learning a month ago, can't find a decent site thats free and actually helpful.",
            "Nice work",
            "This does wonders to rekindle my motivation! Thank you!!",
            "Going to use this to guide me as I learn python",
            "I'd move OOP to end of basics, move environments, map, collections, async to advanced. Data structures depends. Move decorators to medium.",
            "Mind if use this as my phone's lock screen?",
            "Packages probably belong somewhere around pip and virtual environments",
            "Damn, I'm advanced\ud83d\ude05",
            "You need to learn about generators before you can learn async",
            "If I have done the basics but need to learn the medium section, what would be the best resource for me to start learning it?",
            "Is parallelism considered advanced? I feel like that\u2019s the same concept as async",
            "Im at functions, is this where I commit no longer living?",
            "Also, let me know what other tiers of difficulty I should add or definitions and examples of each topic you think would be helpful for a beginner.",
            "Can anyone do the same for java ? Or link me?",
            "How does this help you learn when the terms have no context with them? For example I have no idea what \"dunder methods\" are, yet I'm sure I'm familiar with the programming pattern they represent. So how does this help me?"
        ]
    },
    "ixjald": {
        "author": "ai_basics",
        "subreddit": "Python",
        "created": "22/09/2020 08:09:17",
        "distinguished": null,
        "fullname": "t3_ixjald",
        "downs": 0,
        "num_comments": 0,
        "title": "Jupyter notebook themes",
        "view_count": null,
        "score": 2,
        "url": "https://youtu.be/VFxxhC_bf6o",
        "comments": []
    },
    "ixj55o": {
        "author": "The_Tech_Industry",
        "subreddit": "Python",
        "created": "22/09/2020 07:54:54",
        "distinguished": null,
        "fullname": "t3_ixj55o",
        "downs": 0,
        "num_comments": 5,
        "title": "I made a Whatsapp message bomber/bot using python web scraping",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/ixj55o/i_made_a_whatsapp_message_bomberbot_using_python/",
        "comments": [
            "In thesee days I have been thinking to a python multitarget bot based on selenium and a hypothetical module to get text form the screen. You can then take a first \"text screenshot\" to filter all the other strings that are not the new messages, like the name on whatsapp web, and every tick you check if there's any new text. Then we can use a simple dictionary for the chat bot and with pynput typing in the answer. That would be pretty...",
            "Hehehe hacky sneaky thing... I like it.",
            "What are the benefits of using this app, besides blacklisting your own phone number?"
        ]
    },
    "iwoml8": {
        "author": "lakesare",
        "subreddit": "Python",
        "created": "20/09/2020 23:14:46",
        "distinguished": null,
        "fullname": "t3_iwoml8",
        "downs": 0,
        "num_comments": 12,
        "title": "Original Zen of Python",
        "view_count": null,
        "score": 392,
        "url": "https://i.redd.it/pb953nfpxdo51.png",
        "comments": [
            "It should've included something about limiting the number of ways to format a print statement :)",
            "PEP 0.008",
            "Is one of them about using x,y, i,j and some random greek letters in all CS theory classes?",
            "Can you imagine reading this back then? I\u2019m sure some people were just like bro, wtf are you talking about? Have you been drinking from those lead pipes again?",
            "The Zen of Python is not Zen.",
            "That's a PAP: Python Anterior Proposal."
        ]
    },
    "ixcguc": {
        "author": "Im__Joseph",
        "subreddit": "Python",
        "created": "22/09/2020 00:00:11",
        "distinguished": "moderator",
        "fullname": "t3_ixcguc",
        "downs": 0,
        "num_comments": 11,
        "title": "Tuesday megathread: Advanced questions",
        "view_count": null,
        "score": 4,
        "url": "https://www.reddit.com/r/Python/comments/ixcguc/tuesday_megathread_advanced_questions/",
        "comments": [
            "I'd like to find a solution for boilerplate code that doesn't involve decorators. For example, sometimes you need to implement many functions that all do the same thing at the beginning or end of the function.  I do this a lot with API handlers. The obvious solution seems to be decorators to wrap that common code, but they almost always need to inject new parameters into the function as a result. It's gets even messier if the decorator needs to take parameters itself (wrapper inception).  Maybe I'm just being whiny here, but does anyone know of a more elegant solution than this?",
            "Hi guys,\n\nSo i need advice on something:\nI have some database functions- checks if a table exists, returns columns of a table, and so on. \nI have also created a decorator that creates a connection to the DB and passes it to the decorated function. In creating the decorated i added a factory that takes the connection parameters( user, password, etc) because my conection is variable.\nSo i have this in a module, and then i have a main where i import the db module.\nThe db to connect to i get in main as an argument. But i can't import  from dbmodule because when i import the decorator is executed and it needs the params.\nAny other ideea how to deal with this? I hope i have been clear enough.",
            "Consider the two different decorator calls:\n\n    @decorator\n    def func(a,b):\n\nand\n\n    @decorator(funcParam)\n    def func(a,b):\n\nwhere funcParam is a function reference passed to the decorator.  These two examples call the decorator the following way 'decorator(func)' and 'decorator(funcParam)(func)'.  In both cases a function is passed to the decorator function; however, in one case it's the function to decorate and the other it is a parameter to the decorator.  Is there a clever way to know which one you are handling (I don't think there is)?\n\nIf the decorator didn't take a function reference then you could check to see if parameter is callable to see if you were passed parameters or the function to be decorated; however, that doesn't work if the parameter passed to the decorator is a function.",
            "hey guys so i am working on an AI assistant and i would like to give it Voice input as well as typed input, so far im successfully done with the voice input part but i wanna know how can i give it type input. so for example there is a text box and when ever user clicks the textbox to write something \\[like \"Open youtube\"\\] it should process the text command. My assistant has a wake word functionality too. This is just a project im working on for clg as well as my resume. I'll greatly appreciate it if someone could help me out.",
            "Can anyone help me with this code I'm trying to write?\n\n[https://stackoverflow.com/questions/63962089/how-do-you-create-a-bcc-lattice-with-varying-parameters-and-replace-an-stl-body](https://stackoverflow.com/questions/63962089/how-do-you-create-a-bcc-lattice-with-varying-parameters-and-replace-an-stl-body)",
            "I have a big problem:\n\nDoes someone know how to run two instances of Flaks / flask_restful in one run.py or in other word two instances of flaks in one docker container"
        ]
    },
    "ixd250": {
        "author": "pubs12",
        "subreddit": "Python",
        "created": "22/09/2020 00:36:03",
        "distinguished": null,
        "fullname": "t3_ixd250",
        "downs": 0,
        "num_comments": 8,
        "title": "What boilerplate do you wish existed whenever you started new projects?",
        "view_count": null,
        "score": 3,
        "url": "https://www.reddit.com/r/Python/comments/ixd250/what_boilerplate_do_you_wish_existed_whenever_you/",
        "comments": [
            "[Cookiecutter](https://github.com/cookiecutter/cookiecutter) looks like it would be good for setting up projects from a template. I've come across before, but haven't had an opportunity to used it.",
            "I wish .gitignore is automatically set up when starting new projects in vscode",
            "Genetic algorithms",
            "I wish config files would magically write themselves",
            "Poetry has  worked well for me."
        ]
    },
    "ixi4df": {
        "author": "JaprozSaini",
        "subreddit": "Python",
        "created": "22/09/2020 06:24:18",
        "distinguished": null,
        "fullname": "t3_ixi4df",
        "downs": 0,
        "num_comments": 0,
        "title": "Extension",
        "view_count": null,
        "score": 0,
        "url": "https://www.reddit.com/r/Python/comments/ixi4df/extension/",
        "comments": []
    },
    "ixhhtk": {
        "author": "geeksforgeeks",
        "subreddit": "Python",
        "created": "22/09/2020 05:33:09",
        "distinguished": null,
        "fullname": "t3_ixhhtk",
        "downs": 0,
        "num_comments": 0,
        "title": "Beginner Tips for Learning Python",
        "view_count": null,
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/ixhhtk/beginner_tips_for_learning_python/",
        "comments": []
    },
    "ixp28a": {
        "author": "pimterry",
        "subreddit": "Python",
        "created": "22/09/2020 15:01:14",
        "distinguished": null,
        "fullname": "t3_ixp28a",
        "downs": 0,
        "num_comments": 8,
        "title": "Flask is a cancer",
        "view_count": null,
        "score": 0,
        "url": "https://www.ulam.io/blog/flask-is-a-cancer/",
        "comments": [
            "Instead of terming flask as cancer the author could have done justice and renamed the post as 'Learn to use the right tool for the job'.",
            "There was a good blog post that said: if you don't use django you will end up inventing it.",
            "Ok, I have a question.\n\nCan one use the django ORM with a sqlite backend in a CLI application? In other words, can one use the django ORM as one would use SQLAlchemy, completely detached from django?",
            "Can't confirm or deny. But I do like Flask in the limited context I've used it. Will upvote to see the discussion however",
            "It's a bummer that the title is inflammatory, because I've felt these frustrations with Flask as well despite a few attempts at getting familiar with it over the years. [cookiecutter-flask](https://github.com/cookiecutter-flask/cookiecutter-flask) is helpful in overcoming the bootstrapping hurdle, but I always miss the familiarity of the Django ORM.\n\nCan someone with more Flask experience chime in on some workarounds to the problems the author highlights?",
            "> Back in 2012, the SQLAlchemy was superior to Django ORM. But that\u2019s in the past now.\n\nI see no objective substantiation of this statement."
        ]
    },
    "ixn1v0": {
        "author": "Liubey",
        "subreddit": "Python",
        "created": "22/09/2020 13:09:01",
        "distinguished": null,
        "fullname": "t3_ixn1v0",
        "downs": 0,
        "num_comments": 1,
        "title": "Can someone tell whats wrong with my python linter? Its in spanish but the general error messages are in english",
        "view_count": null,
        "score": 0,
        "url": "https://i.redd.it/bom37aho7po51.jpg",
        "comments": [
            "Your linter is pylint. Seeing the message it is not installed or not in your PATH."
        ]
    },
    "iwyvpu": {
        "author": "ledesmablt",
        "subreddit": "Python",
        "created": "21/09/2020 11:50:31",
        "distinguished": null,
        "fullname": "t3_iwyvpu",
        "downs": 0,
        "num_comments": 6,
        "title": "Spotify Command Line Interface",
        "view_count": null,
        "score": 17,
        "url": "https://www.reddit.com/r/Python/comments/iwyvpu/spotify_command_line_interface/",
        "comments": [
            "Cool project.\n\nWhy would there be rate limits depending on how many users are using, if everyone is supposed to use their own creds?\n\nAs far as I know, premium shouldn't have a rate limit right?"
        ]
    },
    "ix1pmx": {
        "author": "mhamilton723",
        "subreddit": "Python",
        "created": "21/09/2020 14:41:35",
        "distinguished": null,
        "fullname": "t3_ix1pmx",
        "downs": 0,
        "num_comments": 0,
        "title": "Microsoft Releases Speech to Text, Anomaly Detection, and Cybersecurity ML in PySpark",
        "view_count": null,
        "score": 9,
        "url": "https://v.redd.it/xslhu578jio51",
        "comments": []
    },
    "ixes3q": {
        "author": "cv2020br",
        "subreddit": "Python",
        "created": "22/09/2020 02:23:48",
        "distinguished": null,
        "fullname": "t3_ixes3q",
        "downs": 0,
        "num_comments": 0,
        "title": "Latest: A browser extension that finds code implementations for machine learning papers anywhere on the web!",
        "view_count": null,
        "score": 0,
        "url": "/r/LatestInML/comments/ixepmg/latest_a_browser_extension_that_finds_code/",
        "comments": []
    },
    "iwdzzx": {
        "author": "linuxfarmer",
        "subreddit": "Python",
        "created": "20/09/2020 13:37:57",
        "distinguished": null,
        "fullname": "t3_iwdzzx",
        "downs": 0,
        "num_comments": 235,
        "title": "Why have I not been using f-strings...",
        "view_count": null,
        "score": 846,
        "url": "https://www.reddit.com/r/Python/comments/iwdzzx/why_have_i_not_been_using_fstrings/",
        "comments": [
            "I know I haven't been using them because most of the projects I work on need to support older versions of Python than 3.6. F-strings are like a little treat when I can work on a project with no legacy support requirements.",
            "Most of the time I use them as well. They are nicely suited. However, I do find sometimes I need to use the format() as well. The other day, I needed format() in a regex expression.\n\nDon't forget the =, as in:\nprint(f'{x=}')\n\nit is a shortcut for something like:\nprint(f'x={x}')\n\nI find it quite handy for logging statements or debug.",
            "F-strings are a gift from the gods. \ud83d\udc4c\ud83c\udffb\u2728",
            "The only time to avoid f-strings is when logging. Assuming you're using the standard logging facilities, passing the format string + arguments to the logger can be a lot faster because the log message is only formatted if it's going to actually be logged.  \n\n\n    import logging\n    logger = logging.getLogger(__name__)\n    \n    ...\n    \n    # This creates the string every time, even if debug logs are disabled\n    logger.debug(f\"My variable is '{my_variable}')\n    \n    # This creates the string only if debug logs are enabled\n    logger.debug(\"My variable is '%s', my_variable)",
            "I recently found out you can even use raw f-strings!\n\n```\nx = 23;\ns = fr'$\\sigma = \\frac{{2}}{{ {x} }}$'\n```\n\nThat would give you a latex math expression, for example.\n\nEdit: i screwed up my markdown on mobile somehow... Hopefully it's still clear.",
            "I _love_ fstrings. Never got my head around format.\n\nMy only pet peeve is that `gettext` strings for localization typically written `_(in this format)` are not detected when `f\"written _(like this)..\"`. So I assign twice e.g.:\n\n    err_msg = _(Error) # for gettext\n    err_msg = f\"{err_msg}: {e}\"\n\nin order to expose \"Error\" for translation.",
            "You can't use them if you want to internationalize your application (e.g via gettext) unfortunately",
            "Note that f-strings are only available from version 3.6 onward. For example, code using it won't work on systems using Debian Stretch or lower without having installed anything beyond the integrated version.",
            "Problem with them that i faced though was that they don't work that great with a really nested string like taking json dump of a dictionary.",
            "*Cry in Python 2.7.14",
            "Same here, I started using them in my last project after using .format() for yeeeears. So much easier to manage!",
            "I started using them the minute I found out about them. Rn, I'm learning JavaScript and Node and immediately searched for the JS equivalent to F-strings. They're called template strings, if anyone is wondering",
            "Some examples of when to use str.format(): [https://dwane.blog/str-format/](https://dwane.blog/str-format/)",
            "I know right! f-strings are beautiful.\n\nI also recently found out you can say something like `f\"{foo=}\"` and it will evaluate to `f\"foo={foo}\"` which is quite handy.",
            "Same feeling i had when i got used to using list comprehension",
            "Just don't get too excited and use them in your SQL statements",
            "what is f string",
            "f-strings are great and format() is great, but since I only discovered it recently after years with the other two, format_map is also great.",
            "[Template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) in javascript are common knowledge, too right? Because when I discovered those (not really a JS programmer first) I was just about as tickled as you, I think.",
            "This is the way.",
            "Just wait until you use the [walrus operator](https://www.python.org/dev/peps/pep-0572/#id6)",
            "they are just the best",
            "IKR... insanely helpful",
            " Can't we import fstring from future like print was done?",
            "The same story",
            "I just learned about them this week. I don\u2019t code that often. I\u2019m mostly in the database. But, I needed to write some scripts this week and discovered them. They are pretty cool looking.",
            "Is using f-string fully covering all you can do conveniently using other formatting methods?",
            "I only just started using .format() instead of regular string concatenation, and that's already changed my life.\n\nThat's in a Python 2.x environment though. Can't wait until we migrate to 3.x so I can play with f-strings.",
            "F-strings is just syntactic sugar for the .format(), so yes, they are better. Although there are places where using older stores is still better.",
            "While not up to date with latest Python version, this still is a valuable resource \n\nhttps://pyformat.info",
            "The other day I was refactoring a function from individually-named arguments to `**kwargs`, and it broke a debug print.\n\nI felt really stupid after 30 seconds, when I remembered that `.format` was still a thing and you don't *always* have to use f-strings.",
            "Looking at code the code I wrote before discovering f strings gives me anxiety...",
            "Same thing for walrus operator",
            "Sorry for being stupid but I've not come across F-Strings before. Please would a fellow redditor explain to me, what they are and what they do?",
            "I'm in the first year of school and we're starting out with python, we have been memeing on f-strings so hard we changed our discord channel name to an f-string format, it's legit a meme. And then only to realize after a couple of days, people still don't know what f-strings do. Thank you for your amazing post, may you be blessed with the F-strings <3",
            "Love f-strings, but they do get in the way of formatting a string for LaTeX interpretation, e.g.\n\n    bold_text=\"Ford Prefect\"\n    fr\"\\textbf{{bold_text}}\"\n\nDoesn't work. \n\nWhat I have to do instead is\n\n    fr\"\\textbf{asc(123)}{bold_text}{asc(125)}\"",
            "Oh man .. these e-fff-in strings!! i didnt know about them till a couple of night ago ... bummer.",
            "i finally stopped using %",
            "Lol they are pretty new.",
            "try this  \n\n\nname = \"bob\"  \nprint(f\"{name=}\")",
            "I said they're amazing in another forum and people yelled at me. They didn't think they were \"functionally pure\" enough or something.",
            "wait...format() also works??. I'm new to this",
            "Oh wow I was just going to post this in /r/learnpython. I was using format and thought I was with the cool kids, but format is very java like and f strings feel more pythonic. I went and converted all the formats in my little project. Sometimes format is still useful, like if you want to align things by eyeballing\n    \n    s = \"\"\"\n        {}       {}      {}      {}\n            {}       {}      {}      {}\n       {}       {}      {}      {}\"\"\".format()",
            "I still use `hello_world = \"hello, %s\" % \"world\"`",
            "'Random number', or ensuring that the inner loop calls random.Random or some other function?",
            "There's literally no point not to use them over any other type of string formatting. They are also faster."
        ]
    },
    "ixat1z": {
        "author": "CookingMathCamp",
        "subreddit": "Python",
        "created": "21/09/2020 22:22:59",
        "distinguished": null,
        "fullname": "t3_ixat1z",
        "downs": 0,
        "num_comments": 1,
        "title": "Zoom Link Copier",
        "view_count": null,
        "score": 2,
        "url": "https://www.reddit.com/r/Python/comments/ixat1z/zoom_link_copier/",
        "comments": [
            "Scripts required to compensate for other peoples\u2019 incompetence!"
        ]
    },
    "iwy0oc": {
        "author": "Aboghazala",
        "subreddit": "Python",
        "created": "21/09/2020 10:43:34",
        "distinguished": null,
        "fullname": "t3_iwy0oc",
        "downs": 0,
        "num_comments": 11,
        "title": "New Tkinter design with radial progressbar",
        "view_count": null,
        "score": 17,
        "url": "https://i.redd.it/5a75fn4j9ho51.png",
        "comments": [
            "Goes to show that the people who shit on tkinter just lack imagination!  I think if someone were to release a \"tkWidgets\" library that allowed people to create these kinds of widgets in a standardised and portable way it could really increase the popularity of the library.",
            "So elegant",
            "how did you do this?",
            "Can we see the code?\nLooks amazing btw"
        ]
    },
    "ix1mnn": {
        "author": "endlesstrax",
        "subreddit": "Python",
        "created": "21/09/2020 14:37:11",
        "distinguished": null,
        "fullname": "t3_ix1mnn",
        "downs": 0,
        "num_comments": 0,
        "title": "Python Practice Problems: Get Ready for Your Next Interview \u2013 Real Python",
        "view_count": null,
        "score": 6,
        "url": "https://realpython.com/python-practice-problems/",
        "comments": []
    },
    "iwyk7c": {
        "author": "diabulusInMusica",
        "subreddit": "Python",
        "created": "21/09/2020 11:26:54",
        "distinguished": null,
        "fullname": "t3_iwyk7c",
        "downs": 0,
        "num_comments": 1,
        "title": "I wrote a Python application that generates Spotify playlists using seed tracks from a user's listening history",
        "view_count": null,
        "score": 6,
        "url": "https://www.reddit.com/r/Python/comments/iwyk7c/i_wrote_a_python_application_that_generates/",
        "comments": [
            "r/madeinpython"
        ]
    }
}